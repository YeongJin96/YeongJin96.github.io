<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://yeongjin96.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://yeongjin96.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-04-21T05:30:00+00:00</updated><id>https://yeongjin96.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">SimCLR code(Linear evaluate)</title><link href="https://yeongjin96.github.io/blog/2023/simCLR_50-_Eval/" rel="alternate" type="text/html" title="SimCLR code(Linear evaluate)"/><published>2023-03-05T16:40:16+00:00</published><updated>2023-03-05T16:40:16+00:00</updated><id>https://yeongjin96.github.io/blog/2023/simCLR_50%25_Eval</id><content type="html" xml:base="https://yeongjin96.github.io/blog/2023/simCLR_50-_Eval/"><![CDATA[<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">import</span> <span class="n">torchvision</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">import</span> <span class="n">torch.nn</span> <span class="k">as</span> <span class="n">nn</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">use_tpu</span> <span class="o">=</span> <span class="bp">False</span>
<span class="k">if</span> <span class="n">use_tpu</span><span class="p">:</span>
  <span class="n">VERSION</span> <span class="o">=</span> <span class="s">"20200220"</span> <span class="c1">#@param ["20200220","nightly", "xrt==1.15.0"]
</span>  <span class="err">!</span><span class="n">curl</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">raw</span><span class="p">.</span><span class="n">githubusercontent</span><span class="p">.</span><span class="n">com</span><span class="o">/</span><span class="n">pytorch</span><span class="o">/</span><span class="n">xla</span><span class="o">/</span><span class="n">master</span><span class="o">/</span><span class="n">contrib</span><span class="o">/</span><span class="n">scripts</span><span class="o">/</span><span class="n">env</span><span class="o">-</span><span class="n">setup</span><span class="p">.</span><span class="n">py</span> <span class="o">-</span><span class="n">o</span> <span class="n">pytorch</span><span class="o">-</span><span class="n">xla</span><span class="o">-</span><span class="n">env</span><span class="o">-</span><span class="n">setup</span><span class="p">.</span><span class="n">py</span>
  <span class="err">!</span><span class="n">python</span> <span class="n">pytorch</span><span class="o">-</span><span class="n">xla</span><span class="o">-</span><span class="n">env</span><span class="o">-</span><span class="n">setup</span><span class="p">.</span><span class="n">py</span> <span class="o">--</span><span class="n">version</span> <span class="err">$</span><span class="n">VERSION</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LogisticRegression</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">n_features</span><span class="p">,</span> <span class="n">n_classes</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">(</span><span class="n">LogisticRegression</span><span class="p">,</span> <span class="n">self</span><span class="p">).</span><span class="nf">__init__</span><span class="p">()</span>

        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="n">n_features</span><span class="p">,</span> <span class="n">n_classes</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">model</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">loader</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">):</span>
    <span class="n">loss_epoch</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">accuracy_epoch</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">model</span><span class="p">.</span><span class="nf">train</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">step</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">loader</span><span class="p">):</span>
        <span class="n">optimizer</span><span class="p">.</span><span class="nf">zero_grad</span><span class="p">()</span>

        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">device</span><span class="p">)</span>
        <span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">device</span><span class="p">)</span>

        <span class="n">output</span> <span class="o">=</span> <span class="nf">model</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">loss</span> <span class="o">=</span> <span class="nf">criterion</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

        <span class="n">predicted</span> <span class="o">=</span> <span class="n">output</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">acc</span> <span class="o">=</span> <span class="p">(</span><span class="n">predicted</span> <span class="o">==</span> <span class="n">y</span><span class="p">).</span><span class="nf">sum</span><span class="p">().</span><span class="nf">item</span><span class="p">()</span> <span class="o">/</span> <span class="n">y</span><span class="p">.</span><span class="nf">size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">accuracy_epoch</span> <span class="o">+=</span> <span class="n">acc</span>

        <span class="n">loss</span><span class="p">.</span><span class="nf">backward</span><span class="p">()</span>
        <span class="n">optimizer</span><span class="p">.</span><span class="nf">step</span><span class="p">()</span>

        <span class="n">loss_epoch</span> <span class="o">+=</span> <span class="n">loss</span><span class="p">.</span><span class="nf">item</span><span class="p">()</span>
<span class="c1">#         if step % 100 == 0:
#             print(
#                 f"Step [{step}/{len(loader)}]\t Loss: {loss.item()}\t Accuracy: {acc}"
#             )
</span>
    <span class="k">return</span> <span class="n">loss_epoch</span><span class="p">,</span> <span class="n">accuracy_epoch</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">loader</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">):</span>
    <span class="n">loss_epoch</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">accuracy_epoch</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">model</span><span class="p">.</span><span class="nf">eval</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">step</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">loader</span><span class="p">):</span>
        <span class="n">model</span><span class="p">.</span><span class="nf">zero_grad</span><span class="p">()</span>

        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">device</span><span class="p">)</span>
        <span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">device</span><span class="p">)</span>

        <span class="n">output</span> <span class="o">=</span> <span class="nf">model</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">loss</span> <span class="o">=</span> <span class="nf">criterion</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

        <span class="n">predicted</span> <span class="o">=</span> <span class="n">output</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">acc</span> <span class="o">=</span> <span class="p">(</span><span class="n">predicted</span> <span class="o">==</span> <span class="n">y</span><span class="p">).</span><span class="nf">sum</span><span class="p">().</span><span class="nf">item</span><span class="p">()</span> <span class="o">/</span> <span class="n">y</span><span class="p">.</span><span class="nf">size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">accuracy_epoch</span> <span class="o">+=</span> <span class="n">acc</span>

        <span class="n">loss_epoch</span> <span class="o">+=</span> <span class="n">loss</span><span class="p">.</span><span class="nf">item</span><span class="p">()</span>
        
    <span class="k">return</span> <span class="n">loss_epoch</span><span class="p">,</span> <span class="n">accuracy_epoch</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TransformsSimCLR</span><span class="p">:</span>
    <span class="s">"""
    A stochastic data augmentation module that transforms any given data example randomly
    resulting in two correlated views of the same example,
    denoted x ̃i and x ̃j, which we consider as a positive pair.
    """</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
        <span class="n">s</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">color_jitter</span> <span class="o">=</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">ColorJitter</span><span class="p">(</span>
            <span class="mf">0.8</span> <span class="o">*</span> <span class="n">s</span><span class="p">,</span> <span class="mf">0.8</span> <span class="o">*</span> <span class="n">s</span><span class="p">,</span> <span class="mf">0.8</span> <span class="o">*</span> <span class="n">s</span><span class="p">,</span> <span class="mf">0.2</span> <span class="o">*</span> <span class="n">s</span>
        <span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">train_transform</span> <span class="o">=</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">Compose</span><span class="p">(</span>
            <span class="p">[</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">RandomResizedCrop</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="n">size</span><span class="p">),</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">RandomHorizontalFlip</span><span class="p">(),</span>  <span class="c1"># with 0.5 probability
</span>                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">RandomApply</span><span class="p">([</span><span class="n">color_jitter</span><span class="p">],</span> <span class="n">p</span><span class="o">=</span><span class="mf">0.8</span><span class="p">),</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">RandomGrayscale</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="mf">0.2</span><span class="p">),</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">ToTensor</span><span class="p">(),</span>
            <span class="p">]</span>
        <span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">test_transform</span> <span class="o">=</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">Compose</span><span class="p">(</span>
            <span class="p">[</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">Resize</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="n">size</span><span class="p">),</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">ToTensor</span><span class="p">(),</span>
            <span class="p">]</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">train_transform</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="nf">train_transform</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">yaml</span>

<span class="k">def</span> <span class="nf">yaml_config_hook</span><span class="p">(</span><span class="n">config_file</span><span class="p">):</span>
    <span class="s">"""
    Custom YAML config loader, which can include other yaml files (I like using config files
    insteaad of using argparser)
    """</span>

    <span class="c1"># load yaml files in the nested 'defaults' section, which include defaults for experiments
</span>    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">config_file</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">cfg</span> <span class="o">=</span> <span class="n">yaml</span><span class="p">.</span><span class="nf">safe_load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="s">"defaults"</span><span class="p">,</span> <span class="p">[]):</span>
            <span class="n">config_dir</span><span class="p">,</span> <span class="n">cf</span> <span class="o">=</span> <span class="n">d</span><span class="p">.</span><span class="nf">popitem</span><span class="p">()</span>
            <span class="n">cf</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">config_file</span><span class="p">),</span> <span class="n">config_dir</span><span class="p">,</span> <span class="n">cf</span> <span class="o">+</span> <span class="s">".yaml"</span><span class="p">)</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">cf</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">l</span> <span class="o">=</span> <span class="n">yaml</span><span class="p">.</span><span class="nf">safe_load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
                <span class="n">cfg</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>

    <span class="k">if</span> <span class="s">"defaults"</span> <span class="ow">in</span> <span class="n">cfg</span><span class="p">.</span><span class="nf">keys</span><span class="p">():</span>
        <span class="k">del</span> <span class="n">cfg</span><span class="p">[</span><span class="s">"defaults"</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">cfg</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_resnet</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">pretrained</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="n">resnets</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">"resnet18"</span><span class="p">:</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">models</span><span class="p">.</span><span class="nf">resnet18</span><span class="p">(</span><span class="n">pretrained</span><span class="o">=</span><span class="n">pretrained</span><span class="p">),</span>
        <span class="s">"resnet50"</span><span class="p">:</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">models</span><span class="p">.</span><span class="nf">resnet50</span><span class="p">(</span><span class="n">pretrained</span><span class="o">=</span><span class="n">pretrained</span><span class="p">),</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">resnets</span><span class="p">.</span><span class="nf">keys</span><span class="p">():</span>
        <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s"> is not a valid ResNet version"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">resnets</span><span class="p">[</span><span class="n">name</span><span class="p">]</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SimCLR</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="s">"""
    We opt for simplicity and adopt the commonly used ResNet (He et al., 2016) to obtain hi = f(x ̃i) = ResNet(x ̃i) where hi ∈ Rd is the output after the average pooling layer.
    """</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">encoder</span><span class="p">,</span> <span class="n">projection_dim</span><span class="p">,</span> <span class="n">n_features</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">(</span><span class="n">SimCLR</span><span class="p">,</span> <span class="n">self</span><span class="p">).</span><span class="nf">__init__</span><span class="p">()</span>

        <span class="n">self</span><span class="p">.</span><span class="n">encoder</span> <span class="o">=</span> <span class="n">encoder</span>
        <span class="n">self</span><span class="p">.</span><span class="n">n_features</span> <span class="o">=</span> <span class="n">n_features</span>

        <span class="c1"># Replace the fc layer with an Identity function
</span>        <span class="n">self</span><span class="p">.</span><span class="n">encoder</span><span class="p">.</span><span class="n">fc</span> <span class="o">=</span> <span class="nc">Identity</span><span class="p">()</span>

        <span class="c1"># We use a MLP with one hidden layer to obtain z_i = g(h_i) = W(2)σ(W(1)h_i) where σ is a ReLU non-linearity.
</span>        <span class="n">self</span><span class="p">.</span><span class="n">projector</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">n_features</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">n_features</span><span class="p">,</span> <span class="n">bias</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="nc">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">n_features</span><span class="p">,</span> <span class="n">projection_dim</span><span class="p">,</span> <span class="n">bias</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x_i</span><span class="p">,</span> <span class="n">x_j</span><span class="p">):</span>
        <span class="n">h_i</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">encoder</span><span class="p">(</span><span class="n">x_i</span><span class="p">)</span>
        <span class="n">h_j</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">encoder</span><span class="p">(</span><span class="n">x_j</span><span class="p">)</span>

        <span class="n">z_i</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">projector</span><span class="p">(</span><span class="n">h_i</span><span class="p">)</span>
        <span class="n">z_j</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">projector</span><span class="p">(</span><span class="n">h_j</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">h_i</span><span class="p">,</span> <span class="n">h_j</span><span class="p">,</span> <span class="n">z_i</span><span class="p">,</span> <span class="n">z_j</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">torch.optim.optimizer</span> <span class="kn">import</span> <span class="n">Optimizer</span><span class="p">,</span> <span class="n">required</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Identity</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">(</span><span class="n">Identity</span><span class="p">,</span> <span class="n">self</span><span class="p">).</span><span class="nf">__init__</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">x</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>

<span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s">"SimCLR"</span><span class="p">)</span>
<span class="n">config</span> <span class="o">=</span> <span class="nf">yaml_config_hook</span><span class="p">(</span><span class="s">"./config/config.yaml"</span><span class="p">)</span><span class="c1">####config folder path
</span><span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">config</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sa">f</span><span class="s">"--</span><span class="si">{</span><span class="n">k</span><span class="si">}</span><span class="s">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">v</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nf">type</span><span class="p">(</span><span class="n">v</span><span class="p">))</span>

<span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">([])</span>

<span class="k">if</span> <span class="n">use_tpu</span><span class="p">:</span>
  <span class="n">args</span><span class="p">.</span><span class="n">device</span> <span class="o">=</span> <span class="n">dev</span>
<span class="k">else</span><span class="p">:</span>
  <span class="n">args</span><span class="p">.</span><span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">device</span><span class="p">(</span><span class="s">"cuda:0"</span> <span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="s">"cpu"</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">args</span><span class="p">.</span><span class="n">dataset</span> <span class="o">=</span> <span class="s">"Custom"</span> <span class="c1"># make sure to check this with the (pre-)trained checkpoint
</span><span class="n">args</span><span class="p">.</span><span class="n">resnet</span> <span class="o">=</span> <span class="s">"resnet50"</span> <span class="c1"># make sure to check this with the (pre-)trained checkpoint
</span><span class="n">args</span><span class="p">.</span><span class="n">model_path</span> <span class="o">=</span> <span class="s">"./"</span>
<span class="n">args</span><span class="p">.</span><span class="n">logistic_batch_size</span> <span class="o">=</span> <span class="mi">64</span>
<span class="n">args</span><span class="p">.</span><span class="n">logistic_epochs</span> <span class="o">=</span> <span class="mi">100</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">copy</span>
<span class="n">pre_model_dir_path</span> <span class="o">=</span> <span class="s">'./models/50%'</span>

<span class="k">def</span> <span class="nf">pretext_model_save</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">epoch</span><span class="p">,</span> <span class="n">pre_model_dir_path</span><span class="o">=</span><span class="n">pre_model_dir_path</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isdir</span><span class="p">(</span><span class="n">pre_model_dir_path</span><span class="p">):</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">pre_model_dir_path</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    
    <span class="n">torch</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="nf">state_dict</span><span class="p">(),</span> <span class="n">pre_model_dir_path</span><span class="o">+</span><span class="s">'/best-parameters.pt'</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">torch.utils.data</span> <span class="kn">import</span> <span class="n">random_split</span>
<span class="k">def</span> <span class="nf">Train_valid_split</span><span class="p">(</span><span class="n">dataset</span><span class="p">,</span> <span class="n">test_split</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">logistic_batch_size</span><span class="p">):</span>
    <span class="n">dataset_size</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">dataset</span><span class="p">)</span>
    <span class="n">val_size</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">test_split</span> <span class="o">*</span> <span class="n">dataset_size</span><span class="p">)</span>
    <span class="n">train_size</span> <span class="o">=</span> <span class="n">dataset_size</span> <span class="o">-</span> <span class="n">val_size</span>

    <span class="n">train_dataset</span><span class="p">,</span> <span class="n">val_dataset</span> <span class="o">=</span> <span class="nf">random_split</span><span class="p">(</span><span class="n">dataset</span><span class="p">,</span>
                                               <span class="p">[</span><span class="n">train_size</span><span class="p">,</span> <span class="n">val_size</span><span class="p">])</span>
    
    <span class="n">train_loader</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nc">DataLoader</span><span class="p">(</span>
        <span class="n">train_dataset</span><span class="p">,</span>
        <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span>
        <span class="n">drop_last</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
        <span class="n">shuffle</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
        <span class="n">num_workers</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">workers</span><span class="p">,)</span>
    
    <span class="n">val_loader</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nc">DataLoader</span><span class="p">(</span>
        <span class="n">val_dataset</span><span class="p">,</span>
        <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span>
        <span class="n">drop_last</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
        <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
        <span class="n">num_workers</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">workers</span><span class="p">,)</span>

    <span class="k">return</span> <span class="n">train_loader</span><span class="p">,</span> <span class="n">val_loader</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">torchvision.datasets</span> <span class="kn">import</span> <span class="n">ImageFolder</span>
<span class="n">train_dataset</span> <span class="o">=</span> <span class="nc">ImageFolder</span><span class="p">(</span><span class="n">root</span><span class="o">=</span><span class="s">'../research/data/train_%50'</span><span class="p">,</span> <span class="n">transform</span><span class="o">=</span><span class="nc">TransformsSimCLR</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">image_size</span><span class="p">).</span><span class="n">test_transform</span><span class="p">)</span>
<span class="n">test_dataset</span> <span class="o">=</span> <span class="nc">ImageFolder</span><span class="p">(</span><span class="n">root</span><span class="o">=</span><span class="s">'../research/data/PNU/test'</span><span class="p">,</span> <span class="n">transform</span><span class="o">=</span><span class="nc">TransformsSimCLR</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">image_size</span><span class="p">).</span><span class="n">test_transform</span><span class="p">)</span>


<span class="n">train_loader</span><span class="p">,</span> <span class="n">val_loader</span> <span class="o">=</span> <span class="nc">Train_valid_split</span><span class="p">(</span><span class="n">train_dataset</span><span class="p">)</span>

<span class="n">test_loader</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nc">DataLoader</span><span class="p">(</span><span class="n">test_dataset</span><span class="p">,</span> 
                                          <span class="n">batch_size</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">logistic_batch_size</span><span class="p">,</span>
                                          <span class="n">drop_last</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                                          <span class="n">shuffle</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">encoder</span> <span class="o">=</span> <span class="nf">get_resnet</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">resnet</span><span class="p">,</span> <span class="n">pretrained</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">n_features</span> <span class="o">=</span> <span class="n">encoder</span><span class="p">.</span><span class="n">fc</span><span class="p">.</span><span class="n">in_features</span>

<span class="c1"># load pre-trained model from checkpoint
</span><span class="n">simclr_model</span> <span class="o">=</span> <span class="nc">SimCLR</span><span class="p">(</span><span class="n">encoder</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">projection_dim</span><span class="p">,</span> <span class="n">n_features</span><span class="p">)</span>
<span class="n">model_fp</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span>
    <span class="n">args</span><span class="p">.</span><span class="n">model_path</span><span class="p">,</span> <span class="s">"SimCLR_50%_E1909.pt"</span>
<span class="p">)</span>
<span class="n">simclr_model</span><span class="p">.</span><span class="nf">load_state_dict</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">model_fp</span><span class="p">,</span> <span class="n">map_location</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">device</span><span class="p">.</span><span class="nb">type</span><span class="p">))</span>
<span class="n">simclr_model</span> <span class="o">=</span> <span class="n">simclr_model</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">device</span><span class="p">)</span>
<span class="n">simclr_model</span><span class="p">.</span><span class="nf">eval</span><span class="p">()</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## Logistic Regression
</span><span class="n">n_classes</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">model</span> <span class="o">=</span> <span class="nc">LogisticRegression</span><span class="p">(</span><span class="n">simclr_model</span><span class="p">.</span><span class="n">n_features</span><span class="p">,</span> <span class="n">n_classes</span><span class="p">)</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">device</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">optimizer</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">optim</span><span class="p">.</span><span class="nc">Adam</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="nf">parameters</span><span class="p">(),</span> <span class="n">lr</span><span class="o">=</span><span class="mf">0.0003</span><span class="p">)</span>
<span class="n">criterion</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="nc">CrossEntropyLoss</span><span class="p">()</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">inference</span><span class="p">(</span><span class="n">loader</span><span class="p">,</span> <span class="n">simclr_model</span><span class="p">,</span> <span class="n">device</span><span class="p">):</span>
    <span class="n">feature_vector</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">labels_vector</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">step</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">loader</span><span class="p">):</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>

        <span class="c1"># get encoding
</span>        <span class="k">with</span> <span class="n">torch</span><span class="p">.</span><span class="nf">no_grad</span><span class="p">():</span>
            <span class="n">h</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="nf">simclr_model</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>

        <span class="n">h</span> <span class="o">=</span> <span class="n">h</span><span class="p">.</span><span class="nf">detach</span><span class="p">()</span>

        <span class="n">feature_vector</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">h</span><span class="p">.</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">detach</span><span class="p">().</span><span class="nf">numpy</span><span class="p">())</span>
        <span class="n">labels_vector</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="nf">numpy</span><span class="p">())</span>

        <span class="k">if</span> <span class="n">step</span> <span class="o">%</span> <span class="mi">20</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Step [</span><span class="si">{</span><span class="n">step</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">loader</span><span class="p">)</span><span class="si">}</span><span class="s">]</span><span class="se">\t</span><span class="s"> Computing features..."</span><span class="p">)</span>

    <span class="n">feature_vector</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">feature_vector</span><span class="p">)</span>
    <span class="n">labels_vector</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">labels_vector</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Features shape {}"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">feature_vector</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">feature_vector</span><span class="p">,</span> <span class="n">labels_vector</span>


<span class="k">def</span> <span class="nf">get_features</span><span class="p">(</span><span class="n">context_model</span><span class="p">,</span> <span class="n">train_loader</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">,</span> <span class="n">test_loader</span><span class="p">,</span> <span class="n">device</span><span class="p">):</span>
    <span class="n">train_X</span><span class="p">,</span> <span class="n">train_y</span> <span class="o">=</span> <span class="nf">inference</span><span class="p">(</span><span class="n">train_loader</span><span class="p">,</span> <span class="n">context_model</span><span class="p">,</span> <span class="n">device</span><span class="p">)</span>
    <span class="n">val_X</span><span class="p">,</span> <span class="n">val_y</span> <span class="o">=</span> <span class="nf">inference</span><span class="p">(</span><span class="n">val_loader</span><span class="p">,</span> <span class="n">context_model</span><span class="p">,</span> <span class="n">device</span><span class="p">)</span>
    <span class="n">test_X</span><span class="p">,</span> <span class="n">test_y</span> <span class="o">=</span> <span class="nf">inference</span><span class="p">(</span><span class="n">test_loader</span><span class="p">,</span> <span class="n">context_model</span><span class="p">,</span> <span class="n">device</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">train_X</span><span class="p">,</span> <span class="n">train_y</span><span class="p">,</span> <span class="n">val_X</span><span class="p">,</span> <span class="n">val_y</span><span class="p">,</span> <span class="n">test_X</span><span class="p">,</span> <span class="n">test_y</span>


<span class="k">def</span> <span class="nf">create_data_loaders_from_arrays</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">X_val</span><span class="p">,</span> <span class="n">y_val</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>
    <span class="n">train</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nc">TensorDataset</span><span class="p">(</span>
        <span class="n">torch</span><span class="p">.</span><span class="nf">from_numpy</span><span class="p">(</span><span class="n">X_train</span><span class="p">),</span> <span class="n">torch</span><span class="p">.</span><span class="nf">from_numpy</span><span class="p">(</span><span class="n">y_train</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="n">train_loader</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nc">DataLoader</span><span class="p">(</span>
        <span class="n">train</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span>
    <span class="p">)</span>
    
    <span class="n">val</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nc">TensorDataset</span><span class="p">(</span>
        <span class="n">torch</span><span class="p">.</span><span class="nf">from_numpy</span><span class="p">(</span><span class="n">X_val</span><span class="p">),</span> <span class="n">torch</span><span class="p">.</span><span class="nf">from_numpy</span><span class="p">(</span><span class="n">y_val</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="n">val_loader</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nc">DataLoader</span><span class="p">(</span>
        <span class="n">val</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span>
    <span class="p">)</span>

    <span class="n">test</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nc">TensorDataset</span><span class="p">(</span>
        <span class="n">torch</span><span class="p">.</span><span class="nf">from_numpy</span><span class="p">(</span><span class="n">X_test</span><span class="p">),</span> <span class="n">torch</span><span class="p">.</span><span class="nf">from_numpy</span><span class="p">(</span><span class="n">y_test</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="n">test_loader</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nc">DataLoader</span><span class="p">(</span>
        <span class="n">test</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">train_loader</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">,</span> <span class="n">test_loader</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="s">"### Creating features from pre-trained context model ###"</span><span class="p">)</span>
<span class="p">(</span><span class="n">train_X</span><span class="p">,</span> <span class="n">train_y</span><span class="p">,</span> <span class="n">val_X</span><span class="p">,</span> <span class="n">val_y</span><span class="p">,</span> <span class="n">test_X</span><span class="p">,</span> <span class="n">test_y</span><span class="p">)</span> <span class="o">=</span> <span class="nf">get_features</span><span class="p">(</span>
    <span class="n">simclr_model</span><span class="p">,</span> <span class="n">train_loader</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">,</span> <span class="n">test_loader</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">device</span>
<span class="p">)</span>

<span class="n">arr_train_loader</span><span class="p">,</span> <span class="n">arr_val_loader</span><span class="p">,</span> <span class="n">arr_test_loader</span> <span class="o">=</span> <span class="nf">create_data_loaders_from_arrays</span><span class="p">(</span>
    <span class="n">train_X</span><span class="p">,</span> <span class="n">train_y</span><span class="p">,</span> <span class="n">val_X</span><span class="p">,</span> <span class="n">val_y</span><span class="p">,</span> <span class="n">test_X</span><span class="p">,</span> <span class="n">test_y</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">logistic_batch_size</span>
<span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>### Creating features from pre-trained context model ###
Step [0/58]	 Computing features...
Step [20/58]	 Computing features...
Step [40/58]	 Computing features...
Features shape (3696, 2048)
Step [0/15]	 Computing features...
Features shape (924, 2048)
Step [0/60]	 Computing features...
Step [20/60]	 Computing features...
Step [40/60]	 Computing features...
Features shape (3782, 2048)
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">torch.utils.tensorboard</span> <span class="kn">import</span> <span class="n">SummaryWriter</span>
<span class="n">writer</span> <span class="o">=</span> <span class="nc">SummaryWriter</span><span class="p">(</span><span class="s">'runs/50%'</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">previous_loss</span> <span class="o">=</span> <span class="mf">1.0</span>
<span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">logistic_epochs</span><span class="p">):</span>
    <span class="n">loss_epoch</span><span class="p">,</span> <span class="n">accuracy_epoch</span> <span class="o">=</span> <span class="nf">train</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">arr_train_loader</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">)</span>
    <span class="n">val_loss_epoch</span><span class="p">,</span> <span class="n">val_accuracy_epoch</span> <span class="o">=</span> <span class="nf">test</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">arr_val_loader</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">epoch</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Epoch [</span><span class="si">{</span><span class="n">epoch</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">args</span><span class="p">.</span><span class="n">logistic_epochs</span><span class="si">}</span><span class="s">]</span><span class="se">\t</span><span class="s"> Loss: </span><span class="si">{</span><span class="n">loss_epoch</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">)</span><span class="si">}</span><span class="se">\t</span><span class="s"> Accuracy: </span><span class="si">{</span><span class="n">accuracy_epoch</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Valid [</span><span class="si">{</span><span class="n">epoch</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">args</span><span class="p">.</span><span class="n">logistic_epochs</span><span class="si">}</span><span class="s">]</span><span class="se">\t</span><span class="s"> val_Loss: </span><span class="si">{</span><span class="n">val_loss_epoch</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">val_loader</span><span class="p">)</span><span class="si">}</span><span class="se">\t</span><span class="s"> val_Accuracy: </span><span class="si">{</span><span class="n">val_accuracy_epoch</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">val_loader</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        
    <span class="n">writer</span><span class="p">.</span><span class="nf">add_scalars</span><span class="p">(</span><span class="s">'Loss'</span><span class="p">,</span>
                          <span class="p">{</span><span class="s">'train'</span><span class="p">:</span><span class="n">loss_epoch</span><span class="o">/</span><span class="nf">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">),</span>
                           <span class="s">'val'</span><span class="p">:</span><span class="n">val_loss_epoch</span><span class="o">/</span><span class="nf">len</span><span class="p">(</span><span class="n">val_loader</span><span class="p">)},</span>
                         <span class="n">epoch</span><span class="p">)</span>
        
    <span class="n">writer</span><span class="p">.</span><span class="nf">add_scalars</span><span class="p">(</span><span class="s">'Accuracy'</span><span class="p">,</span>
                          <span class="p">{</span><span class="s">'train'</span><span class="p">:</span><span class="n">accuracy_epoch</span><span class="o">/</span><span class="nf">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">),</span>
                           <span class="s">'val'</span><span class="p">:</span> <span class="n">val_accuracy_epoch</span><span class="o">/</span><span class="nf">len</span><span class="p">(</span><span class="n">val_loader</span><span class="p">)},</span>
                         <span class="n">epoch</span><span class="p">)</span>
    
    <span class="k">if</span> <span class="n">previous_loss</span> <span class="o">&gt;</span> <span class="n">val_loss_epoch</span><span class="o">/</span><span class="nf">len</span><span class="p">(</span><span class="n">val_loader</span><span class="p">):</span>
            <span class="nf">pretext_model_save</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">epoch</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
            <span class="n">previous_loss</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="nf">deepcopy</span><span class="p">(</span><span class="n">val_loss_epoch</span><span class="o">/</span><span class="nf">len</span><span class="p">(</span><span class="n">val_loader</span><span class="p">))</span>
            <span class="n">pre_model_path</span> <span class="o">=</span> <span class="n">pre_model_dir_path</span><span class="o">+</span><span class="s">'/best-parameters.pt'</span>
            <span class="n">best_epoch</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="nf">deepcopy</span><span class="p">(</span><span class="n">epoch</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Epoch [0/100]	 Loss: 0.9889860389561489	 Accuracy: 0.6524784482758621
Valid [0/100]	 val_Loss: 0.8869942466417948	 val_Accuracy: 0.7629464285714286
Epoch [5/100]	 Loss: 0.5573835979247915	 Accuracy: 0.8095366379310345
Valid [5/100]	 val_Loss: 0.5597651084264119	 val_Accuracy: 0.790625
Epoch [10/100]	 Loss: 0.4624352013242656	 Accuracy: 0.8341415229885057
Valid [10/100]	 val_Loss: 0.48047426144282024	 val_Accuracy: 0.812797619047619
Epoch [15/100]	 Loss: 0.4143088573011859	 Accuracy: 0.8529992816091955
Valid [15/100]	 val_Loss: 0.4402555445830027	 val_Accuracy: 0.825595238095238
Epoch [20/100]	 Loss: 0.3828107177697379	 Accuracy: 0.8624281609195402
Valid [20/100]	 val_Loss: 0.41485753655433655	 val_Accuracy: 0.8404761904761905
Epoch [25/100]	 Loss: 0.35973222116971837	 Accuracy: 0.8698814655172413
Valid [25/100]	 val_Loss: 0.3971954603989919	 val_Accuracy: 0.8477678571428572
Epoch [30/100]	 Loss: 0.34167221753761684	 Accuracy: 0.8787715517241379
Valid [30/100]	 val_Loss: 0.38419572114944456	 val_Accuracy: 0.8519345238095238
Epoch [35/100]	 Loss: 0.32689450449984647	 Accuracy: 0.8837104885057472
Valid [35/100]	 val_Loss: 0.3742476920286814	 val_Accuracy: 0.8561011904761905
Epoch [40/100]	 Loss: 0.31440412021916486	 Accuracy: 0.8882902298850575
Valid [40/100]	 val_Loss: 0.3664132316907247	 val_Accuracy: 0.8602678571428571
Epoch [45/100]	 Loss: 0.3035866489698147	 Accuracy: 0.8924209770114943
Valid [45/100]	 val_Loss: 0.3601061741511027	 val_Accuracy: 0.8633928571428572
Epoch [50/100]	 Loss: 0.2940407906626833	 Accuracy: 0.8972701149425287
Valid [50/100]	 val_Loss: 0.35494018892447154	 val_Accuracy: 0.8665178571428572
Epoch [55/100]	 Loss: 0.2854920145252655	 Accuracy: 0.9005028735632183
Valid [55/100]	 val_Loss: 0.3506500035524368	 val_Accuracy: 0.8686011904761906
Epoch [60/100]	 Loss: 0.2777451703260685	 Accuracy: 0.9038254310344828
Valid [60/100]	 val_Loss: 0.3470471531152725	 val_Accuracy: 0.8686011904761906
Epoch [65/100]	 Loss: 0.27065687909208497	 Accuracy: 0.90625
Valid [65/100]	 val_Loss: 0.3439940959215164	 val_Accuracy: 0.8696428571428572
Epoch [70/100]	 Loss: 0.2641189283338086	 Accuracy: 0.9073275862068966
Valid [70/100]	 val_Loss: 0.34138805270195005	 val_Accuracy: 0.8696428571428572
Epoch [75/100]	 Loss: 0.25804773435510436	 Accuracy: 0.9110991379310345
Valid [75/100]	 val_Loss: 0.3391507645448049	 val_Accuracy: 0.8696428571428572
Epoch [80/100]	 Loss: 0.2523774741024807	 Accuracy: 0.9146012931034483
Valid [80/100]	 val_Loss: 0.33722149829069775	 val_Accuracy: 0.8686011904761906
Epoch [85/100]	 Loss: 0.24705542264313535	 Accuracy: 0.9181034482758621
Valid [85/100]	 val_Loss: 0.3355524569749832	 val_Accuracy: 0.8686011904761906
Epoch [90/100]	 Loss: 0.2420387501860487	 Accuracy: 0.9183728448275862
Valid [90/100]	 val_Loss: 0.33410543004671733	 val_Accuracy: 0.8706845238095239
Epoch [95/100]	 Loss: 0.23729218927950696	 Accuracy: 0.9205280172413793
Valid [95/100]	 val_Loss: 0.33284951547781627	 val_Accuracy: 0.8727678571428572
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="s">"best epochs: "</span><span class="p">,</span> <span class="n">best_epoch</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">load_state_dict</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">pre_model_path</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"best model: "</span><span class="p">,</span> <span class="n">pre_model_path</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>best epochs:  100
best model:  ./models/50%/best-parameters.pt
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># final testing
</span><span class="n">test_loss_epoch</span><span class="p">,</span> <span class="n">test_accuracy_epoch</span> <span class="o">=</span> <span class="nf">test</span><span class="p">(</span>
    <span class="n">args</span><span class="p">,</span> <span class="n">arr_test_loader</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">optimizer</span>
<span class="p">)</span>
<span class="nf">print</span><span class="p">(</span>
    <span class="sa">f</span><span class="s">"[FINAL]</span><span class="se">\t</span><span class="s"> Loss: </span><span class="si">{</span><span class="n">test_loss_epoch</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">test_loader</span><span class="p">)</span><span class="si">}</span><span class="se">\t</span><span class="s"> Accuracy: </span><span class="si">{</span><span class="n">test_accuracy_epoch</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">test_loader</span><span class="p">)</span><span class="si">}</span><span class="s">"</span>
<span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[FINAL]	 Loss: 0.3631205373754104	 Accuracy: 0.8489583333333334
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t_1</span><span class="p">,</span> <span class="n">t_2</span><span class="p">,</span> <span class="n">t_3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span>
<span class="n">v_1</span><span class="p">,</span> <span class="n">v_2</span><span class="p">,</span> <span class="n">v_3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span>
<span class="n">ts_1</span><span class="p">,</span> <span class="n">ts_2</span><span class="p">,</span> <span class="n">ts_3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">train_y</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">t_1</span><span class="o">+=</span><span class="mi">1</span>
        
    <span class="k">elif</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">t_2</span><span class="o">+=</span><span class="mi">1</span>
        
    <span class="k">elif</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
        <span class="n">t_3</span><span class="o">+=</span><span class="mi">1</span>
        
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">Exception</span>
        
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">val_y</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">v_1</span><span class="o">+=</span><span class="mi">1</span>
        
    <span class="k">elif</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">v_2</span><span class="o">+=</span><span class="mi">1</span>
        
    <span class="k">elif</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
        <span class="n">v_3</span><span class="o">+=</span><span class="mi">1</span>
        
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">Exception</span>
        
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">test_y</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">ts_1</span><span class="o">+=</span><span class="mi">1</span>
        
    <span class="k">elif</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">ts_2</span><span class="o">+=</span><span class="mi">1</span>
        
    <span class="k">elif</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
        <span class="n">ts_3</span><span class="o">+=</span><span class="mi">1</span>
        
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">Exception</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">t_1</span><span class="p">,</span> <span class="n">t_2</span><span class="p">,</span> <span class="n">t_3</span><span class="p">,</span> <span class="s">'total={}'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">t_1</span><span class="o">+</span><span class="n">t_2</span><span class="o">+</span><span class="n">t_3</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="n">v_1</span><span class="p">,</span> <span class="n">v_2</span><span class="p">,</span> <span class="n">v_3</span><span class="p">,</span> <span class="s">'total={}'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">v_1</span><span class="o">+</span><span class="n">v_2</span><span class="o">+</span><span class="n">v_3</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ts_1</span><span class="p">,</span> <span class="n">ts_2</span><span class="p">,</span> <span class="n">ts_3</span><span class="p">,</span> <span class="s">'total={}'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">ts_1</span><span class="o">+</span><span class="n">ts_2</span><span class="o">+</span><span class="n">ts_3</span><span class="p">))</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1264 1214 1218 total=3696
276 326 322 total=924
1876 770 1136 total=3782
</code></pre></div></div>]]></content><author><name></name></author><category term="experiment"/><category term="code"/><category term="SimCLR"/><summary type="html"><![CDATA[SimCLR 선형회귀평가 코드입니다.]]></summary></entry><entry><title type="html">SimCLR (Linear evaluate)</title><link href="https://yeongjin96.github.io/blog/2023/SimCLR_Evaluate/" rel="alternate" type="text/html" title="SimCLR (Linear evaluate)"/><published>2023-03-05T16:40:16+00:00</published><updated>2023-03-05T16:40:16+00:00</updated><id>https://yeongjin96.github.io/blog/2023/SimCLR_Evaluate</id><content type="html" xml:base="https://yeongjin96.github.io/blog/2023/SimCLR_Evaluate/"><![CDATA[<p><br/> <br/></p> <p>앞서 보유하고 있는 데이터셋(5%, 25%, 50%)으로 Pretrained model을 만들었습니다.</p> <p>훈련된 Pretrained model 뒤에 MLP레이어를 추가해 한번더 학습한 뒤 모델을 평가한 결과입니다.</p> <p><a href="https://yeongjin96.github.io/blog/2023/simCLR_50-_Eval">평가에 사용한 코드 링크</a> <br/> <br/></p> <h3 id="dataset">Dataset</h3> <hr/> <p>데이터셋은 배율(Magnification) <strong>x5</strong>, <strong>x10</strong>, <strong>x40</strong>으로 나누어져 있고, 각 배율마다 <strong>Benign</strong> / <strong>Atypical Ductal Hyperplasia (ADH)</strong> / <strong>Ductal Carcinoma In-Situ (DCIS)</strong> 3개의 Class로 분리되어 있습니다.</p> <p>이중 제가 사용한 데이터의 배율은 x40입니다.<br/> 각 클래스별 데이터의 수는 다음과 같습니다.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/pretrained/Dataset_Table-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/pretrained/Dataset_Table-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/pretrained/Dataset_Table-1400.webp"/> <img src="/assets/img/SimCLR/pretrained/Dataset_Table.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Dataset_Table" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>이후 Train dataset &amp; Test dataset을 8:2 비율로 Split했습니다.</p> <table> <thead> <tr> <th>Original Dataset</th> <th>Train</th> <th>Test</th> </tr> </thead> <tbody> <tr> <td>Benign</td> <td>4542</td> <td>1136</td> </tr> <tr> <td>Atypical Ductal Hyperplasia</td> <td>7505</td> <td>1876</td> </tr> <tr> <td>Ductal Carcinoma In-Situ</td> <td>3079</td> <td>770</td> </tr> <tr> <td>Total</td> <td>15126</td> <td>3782</td> </tr> </tbody> </table> <p>각 클래스별로 데이터 사이즈의 편차가 커서, 가장 작은 데이터사이즈의 클래스와 나머지 클래스들의 데이터 사이즈를 동일하게 사용하였습니다.</p> <table> <thead> <tr> <th>Resized Dataset</th> <th>Dataset</th> <th>Test</th> </tr> </thead> <tbody> <tr> <td>Benign</td> <td>3079</td> <td>1136</td> </tr> <tr> <td>Atypical Ductal Hyperplasia</td> <td>3079</td> <td>1876</td> </tr> <tr> <td>Ductal Carcinoma In-Situ</td> <td>3079</td> <td>770</td> </tr> <tr> <td>Total</td> <td>9237</td> <td>3782</td> </tr> </tbody> </table> <hr/> <p>평가에 사용한 파라미터는 다음과 같습니다. <br/> model: ResNet50</p> <p>optimizer : Adam</p> <p>learning rate : 0.0003</p> <p>loss function : CrossEntropy (Pytorch)</p> <p>batch_size : 64</p> <p>epochs : 100 (Test결과에는 epochs중 loss가 가장 낮은 가중치를 사용했습니다.)</p> <p><br/> <br/></p> <p>class는 총 3개이며, train셋과 validation셋은 각 비율로 나눠진 Train데이터셋의 8:2 비율로 사용했습니다.</p> <p><br/> <br/> <br/></p> <h3 id="simclr-pretrained">SimCLR pretrained</h3> <div class="row"> <div class="col-sm mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/pretrained/loss-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/pretrained/loss-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/pretrained/loss-1400.webp"/> <img src="/assets/img/SimCLR/pretrained/loss.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Pretext_task_Loss" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/pretrained/SimCLR_5%25_lr-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/pretrained/SimCLR_5%25_lr-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/pretrained/SimCLR_5%25_lr-1400.webp"/> <img src="/assets/img/SimCLR/pretrained/SimCLR_5%25_lr.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Pretext_task_lr" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><br/> <br/></p> <hr/> <p><br/></p> <h3 id="5">5%</h3> <p><br/></p> <h5 id="dataset-table">Dataset Table</h5> <table> <thead> <tr> <th>Dataset for Pretext Task</th> <th>Train</th> </tr> </thead> <tbody> <tr> <td>Benign</td> <td>154</td> </tr> <tr> <td>Atypical Ductal Hyperplasia</td> <td>154</td> </tr> <tr> <td>Ductal Carcinoma In-Situ</td> <td>154</td> </tr> <tr> <td>Total</td> <td>462</td> </tr> </tbody> </table> <p><br/></p> <table> <thead> <tr> <th>Dataset for Evaluate</th> <th>Train</th> <th>Validation</th> <th>Test</th> </tr> </thead> <tbody> <tr> <td>Benign</td> <td>126</td> <td>28</td> <td>1136</td> </tr> <tr> <td>Atypical Ductal Hyperplasia</td> <td>122</td> <td>32</td> <td>1876</td> </tr> <tr> <td>Ductal Carcinoma In-Situ</td> <td>122</td> <td>32</td> <td>770</td> </tr> <tr> <td>Total</td> <td>370</td> <td>92</td> <td>3782</td> </tr> </tbody> </table> <p><br/></p> <h5 id="linear-evaluate">Linear Evaluate</h5> <p><br/></p> <div class="col"> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/mat_5%25_acc-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/mat_5%25_acc-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/mat_5%25_acc-1400.webp"/> <img src="/assets/img/SimCLR/downstream/mat_5%25_acc.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="5%_acc.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> ACC: Train &amp; Validation </div> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/mat_5%25_loss-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/mat_5%25_loss-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/mat_5%25_loss-1400.webp"/> <img src="/assets/img/SimCLR/downstream/mat_5%25_loss.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="5%_loss.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> Loss: Train &amp; Validation </div> </div> <p><br/></p> <h6 id="loss-05545">Loss: 0.5545</h6> <h6 id="accuracy-07559">Accuracy: 0.7559</h6> <hr/> <p><br/></p> <h3 id="25">25%</h3> <p><br/></p> <h5 id="dataset-table-1">Dataset Table</h5> <table> <thead> <tr> <th>Dataset for Pretext Task</th> <th>Train</th> </tr> </thead> <tbody> <tr> <td>Benign</td> <td>770</td> </tr> <tr> <td>Atypical Ductal Hyperplasia</td> <td>770</td> </tr> <tr> <td>Ductal Carcinoma In-Situ</td> <td>770</td> </tr> <tr> <td>Total</td> <td>2310</td> </tr> </tbody> </table> <p><br/></p> <table> <thead> <tr> <th>Dataset for Evaluate</th> <th>Train</th> <th>Validation</th> <th>Test</th> </tr> </thead> <tbody> <tr> <td>Benign</td> <td>613</td> <td>157</td> <td>1136</td> </tr> <tr> <td>Atypical Ductal Hyperplasia</td> <td>621</td> <td>149</td> <td>1876</td> </tr> <tr> <td>Ductal Carcinoma In-Situ</td> <td>614</td> <td>156</td> <td>770</td> </tr> <tr> <td>Total</td> <td>1848</td> <td>462</td> <td>3782</td> </tr> </tbody> </table> <p><br/></p> <h5 id="linear-evaluate-1">Linear Evaluate</h5> <p><br/></p> <div class="col"> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/mat_25%25_acc-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/mat_25%25_acc-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/mat_25%25_acc-1400.webp"/> <img src="/assets/img/SimCLR/downstream/mat_25%25_acc.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="25%_acc.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> ACC: Train &amp; Validation </div> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/mat_25%25_loss-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/mat_25%25_loss-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/mat_25%25_loss-1400.webp"/> <img src="/assets/img/SimCLR/downstream/mat_25%25_loss.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="25%_loss.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> Loss: Train &amp; Validation </div> </div> <p><br/></p> <h6 id="loss-03569">Loss: 0.3569</h6> <h6 id="accuracy-08480">Accuracy: 0.8480</h6> <hr/> <p><br/></p> <h3 id="50">50%</h3> <p><br/></p> <h5 id="dataset-table-2">Dataset Table</h5> <table> <thead> <tr> <th>Dataset for Pretext Task</th> <th>Train</th> </tr> </thead> <tbody> <tr> <td>Benign</td> <td>1540</td> </tr> <tr> <td>Atypical Ductal Hyperplasia</td> <td>1540</td> </tr> <tr> <td>Ductal Carcinoma In-Situ</td> <td>1540</td> </tr> <tr> <td>Total</td> <td>4620</td> </tr> </tbody> </table> <p><br/></p> <table> <thead> <tr> <th>Dataset for Evaluate</th> <th>Train</th> <th>Validation</th> <th>Test</th> </tr> </thead> <tbody> <tr> <td>Benign</td> <td>1247</td> <td>293</td> <td>1136</td> </tr> <tr> <td>Atypical Ductal Hyperplasia</td> <td>1243</td> <td>297</td> <td>1876</td> </tr> <tr> <td>Ductal Carcinoma In-Situ</td> <td>1206</td> <td>334</td> <td>770</td> </tr> <tr> <td>Total</td> <td>3696</td> <td>924</td> <td>3782</td> </tr> </tbody> </table> <p><br/></p> <h5 id="linear-evaluate-2">Linear Evaluate</h5> <p><br/></p> <div class="col"> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/mat_50%25_acc-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/mat_50%25_acc-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/mat_50%25_acc-1400.webp"/> <img src="/assets/img/SimCLR/downstream/mat_50%25_acc.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="50%_acc.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> ACC: Train &amp; Validation </div> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/mat_50%25_loss-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/mat_50%25_loss-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/mat_50%25_loss-1400.webp"/> <img src="/assets/img/SimCLR/downstream/mat_50%25_loss.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="50%_loss.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> Loss: Train &amp; Validation </div> </div> <p><br/></p> <h6 id="loss-02767">Loss: 0.2767</h6> <h6 id="accuracy-08879">Accuracy: 0.8879</h6>]]></content><author><name></name></author><category term="experiment"/><category term="SimCLR"/><summary type="html"><![CDATA[SimCLR 선형회귀평가 결과입니다.]]></summary></entry><entry><title type="html">SimCLR (Linear evaluate)</title><link href="https://yeongjin96.github.io/blog/2023/SimCLR_Evaluate/" rel="alternate" type="text/html" title="SimCLR (Linear evaluate)"/><published>2023-03-05T16:40:16+00:00</published><updated>2023-03-05T16:40:16+00:00</updated><id>https://yeongjin96.github.io/blog/2023/SimCLR_Evaluate</id><content type="html" xml:base="https://yeongjin96.github.io/blog/2023/SimCLR_Evaluate/"><![CDATA[<p><br/> <br/></p> <p>앞서 보유하고 있는 데이터셋(5%, 25%, 50%)으로 Pretrained model을 만들었습니다.</p> <p>훈련된 Pretrained model 뒤에 MLP레이어를 추가해 한번더 학습한 뒤 모델을 평가한 결과입니다.</p> <p><a href="https://yeongjin96.github.io/blog/2023/simCLR_50-_Eval">평가에 사용한 코드 링크</a> <br/> <br/></p> <h3 id="dataset">Dataset</h3> <hr/> <p>데이터셋은 배율(Magnification) <strong>x5</strong>, <strong>x10</strong>, <strong>x40</strong>으로 나누어져 있고, 각 배율마다 <strong>Benign</strong> / <strong>Atypical Ductal Hyperplasia (ADH)</strong> / <strong>Ductal Carcinoma In-Situ (DCIS)</strong> 3개의 Class로 분리되어 있습니다.</p> <p>이중 제가 사용한 데이터의 배율은 x40입니다.<br/> 각 클래스별 데이터의 수는 다음과 같습니다.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/pretrained/Dataset_Table-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/pretrained/Dataset_Table-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/pretrained/Dataset_Table-1400.webp"/> <img src="/assets/img/SimCLR/pretrained/Dataset_Table.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Dataset_Table" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>이후 Train dataset &amp; Test dataset을 8:2 비율로 Split했습니다.</p> <table> <thead> <tr> <th>Original Dataset</th> <th>Train</th> <th>Test</th> </tr> </thead> <tbody> <tr> <td>Benign</td> <td>4542</td> <td>1136</td> </tr> <tr> <td>Atypical Ductal Hyperplasia</td> <td>7505</td> <td>1876</td> </tr> <tr> <td>Ductal Carcinoma In-Situ</td> <td>3079</td> <td>770</td> </tr> <tr> <td>Total</td> <td>15126</td> <td>3782</td> </tr> </tbody> </table> <p>각 클래스별로 데이터 사이즈의 편차가 커서, 가장 작은 데이터사이즈의 클래스와 나머지 클래스들의 데이터 사이즈를 동일하게 사용하였습니다.</p> <table> <thead> <tr> <th>Reduce Dataset</th> <th>Dataset</th> <th>Test</th> </tr> </thead> <tbody> <tr> <td>Benign</td> <td>3079</td> <td>1136</td> </tr> <tr> <td>Atypical Ductal Hyperplasia</td> <td>3079</td> <td>1876</td> </tr> <tr> <td>Ductal Carcinoma In-Situ</td> <td>3079</td> <td>770</td> </tr> <tr> <td>Total</td> <td>9237</td> <td>3782</td> </tr> </tbody> </table> <hr/> <p>평가에 사용한 파라미터는 다음과 같습니다. <br/> model: ResNet50</p> <p>optimizer : Adam</p> <p>learning rate : 0.0003</p> <p>loss function : CrossEntropy (Pytorch)</p> <p>batch_size : 64</p> <p>epochs : 100 (Test결과에는 epochs중 loss가 가장 낮은 가중치를 사용했습니다.)</p> <p><br/> <br/></p> <p>class는 총 3개이며, train셋과 validation셋은 각 비율로 나눠진 Train데이터셋의 8:2 비율로 사용했습니다.</p> <p><br/> <br/> <br/></p> <h3 id="simclr-pretrained">SimCLR pretrained</h3> <div class="row"> <div class="col-sm mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/pretrained/loss-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/pretrained/loss-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/pretrained/loss-1400.webp"/> <img src="/assets/img/SimCLR/pretrained/loss.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Pretext_task_Loss" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/pretrained/SimCLR_5%25_lr-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/pretrained/SimCLR_5%25_lr-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/pretrained/SimCLR_5%25_lr-1400.webp"/> <img src="/assets/img/SimCLR/pretrained/SimCLR_5%25_lr.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Pretext_task_lr" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><br/> <br/></p> <hr/> <p><br/></p> <h3 id="5">5%</h3> <p><br/></p> <h5 id="dataset-table">Dataset Table</h5> <table> <thead> <tr> <th>Dataset for Pretext Task</th> <th>Train</th> </tr> </thead> <tbody> <tr> <td>Benign</td> <td>154</td> </tr> <tr> <td>Atypical Ductal Hyperplasia</td> <td>154</td> </tr> <tr> <td>Ductal Carcinoma In-Situ</td> <td>154</td> </tr> <tr> <td>Total</td> <td>462</td> </tr> </tbody> </table> <p><br/></p> <table> <thead> <tr> <th>Dataset for Evaluate</th> <th>Train</th> <th>Validation</th> <th>Test</th> </tr> </thead> <tbody> <tr> <td>Benign</td> <td>126</td> <td>28</td> <td>1136</td> </tr> <tr> <td>Atypical Ductal Hyperplasia</td> <td>122</td> <td>32</td> <td>1876</td> </tr> <tr> <td>Ductal Carcinoma In-Situ</td> <td>122</td> <td>32</td> <td>770</td> </tr> <tr> <td>Total</td> <td>370</td> <td>92</td> <td>3782</td> </tr> </tbody> </table> <p><br/></p> <h5 id="linear-evaluate---using-imagenet">Linear Evaluate - using ImageNet</h5> <p><br/></p> <div class="col"> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/mat_5%25_acc-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/mat_5%25_acc-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/mat_5%25_acc-1400.webp"/> <img src="/assets/img/SimCLR/downstream/mat_5%25_acc.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="5%_acc.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> ACC: Train &amp; Validation </div> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/mat_5%25_loss-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/mat_5%25_loss-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/mat_5%25_loss-1400.webp"/> <img src="/assets/img/SimCLR/downstream/mat_5%25_loss.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="5%_loss.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> Loss: Train &amp; Validation </div> </div> <p><br/></p> <h6 id="loss-05545">Loss: 0.5545</h6> <h6 id="accuracy-07559">Accuracy: 0.7559</h6> <p><br/></p> <p><br/></p> <h5 id="linear-evaluate---using-kidneys">Linear Evaluate - using Kidneys</h5> <p><br/></p> <div class="col"> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/kidneys_5%25_acc-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/kidneys_5%25_acc-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/kidneys_5%25_acc-1400.webp"/> <img src="/assets/img/SimCLR/downstream/kidneys_5%25_acc.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="kidneys_5%_acc.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> ACC: Train &amp; Validation </div> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/kidneys_5%25_loss-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/kidneys_5%25_loss-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/kidneys_5%25_loss-1400.webp"/> <img src="/assets/img/SimCLR/downstream/kidneys_5%25_loss.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="kidneys_5%_loss.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> Loss: Train &amp; Validation </div> </div> <p><br/></p> <h6 id="loss-06162">Loss: 0.6162</h6> <h6 id="accuracy-07362">Accuracy: 0.7362</h6> <p><br/></p> <p><br/></p> <h5 id="linear-evaluate---using-kidneysimagenet">Linear Evaluate - using Kidneys+ImageNet</h5> <p><br/></p> <div class="col"> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/kidneys_imgnet_5%25_acc-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/kidneys_imgnet_5%25_acc-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/kidneys_imgnet_5%25_acc-1400.webp"/> <img src="/assets/img/SimCLR/downstream/kidneys_imgnet_5%25_acc.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="kidneys_imgnet_5%_acc.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> ACC: Train &amp; Validation </div> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/kidneys_imgnet_5%25_loss-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/kidneys_imgnet_5%25_loss-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/kidneys_imgnet_5%25_loss-1400.webp"/> <img src="/assets/img/SimCLR/downstream/kidneys_imgnet_5%25_loss.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="kidneys_imgnet_5%_loss.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> Loss: Train &amp; Validation </div> </div> <p><br/></p> <h6 id="loss-07177">Loss: 0.7177</h6> <h6 id="accuracy-06964">Accuracy: 0.6964</h6> <hr/> <p><br/></p> <h3 id="25">25%</h3> <p><br/></p> <h5 id="dataset-table-1">Dataset Table</h5> <table> <thead> <tr> <th>Dataset for Pretext Task</th> <th>Train</th> </tr> </thead> <tbody> <tr> <td>Benign</td> <td>770</td> </tr> <tr> <td>Atypical Ductal Hyperplasia</td> <td>770</td> </tr> <tr> <td>Ductal Carcinoma In-Situ</td> <td>770</td> </tr> <tr> <td>Total</td> <td>2310</td> </tr> </tbody> </table> <p><br/></p> <table> <thead> <tr> <th>Dataset for Evaluate</th> <th>Train</th> <th>Validation</th> <th>Test</th> </tr> </thead> <tbody> <tr> <td>Benign</td> <td>613</td> <td>157</td> <td>1136</td> </tr> <tr> <td>Atypical Ductal Hyperplasia</td> <td>621</td> <td>149</td> <td>1876</td> </tr> <tr> <td>Ductal Carcinoma In-Situ</td> <td>614</td> <td>156</td> <td>770</td> </tr> <tr> <td>Total</td> <td>1848</td> <td>462</td> <td>3782</td> </tr> </tbody> </table> <p><br/></p> <h5 id="linear-evaluate---using-imagenet-1">Linear Evaluate - using ImageNet</h5> <p><br/></p> <div class="col"> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/mat_25%25_acc-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/mat_25%25_acc-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/mat_25%25_acc-1400.webp"/> <img src="/assets/img/SimCLR/downstream/mat_25%25_acc.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="25%_acc.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> ACC: Train &amp; Validation </div> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/mat_25%25_loss-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/mat_25%25_loss-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/mat_25%25_loss-1400.webp"/> <img src="/assets/img/SimCLR/downstream/mat_25%25_loss.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="25%_loss.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> Loss: Train &amp; Validation </div> </div> <p><br/></p> <h6 id="loss-03569">Loss: 0.3569</h6> <h6 id="accuracy-08480">Accuracy: 0.8480</h6> <p><br/></p> <p><br/></p> <h5 id="linear-evaluate---using-kidneys-1">Linear Evaluate - using Kidneys</h5> <p><br/></p> <div class="col"> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/kidneys_25%25_acc-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/kidneys_25%25_acc-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/kidneys_25%25_acc-1400.webp"/> <img src="/assets/img/SimCLR/downstream/kidneys_25%25_acc.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="kidneys_25%_acc.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> ACC: Train &amp; Validation </div> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/kidneys_25%25_loss-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/kidneys_25%25_loss-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/kidneys_25%25_loss-1400.webp"/> <img src="/assets/img/SimCLR/downstream/kidneys_25%25_loss.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="kidneys_25%_loss.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> Loss: Train &amp; Validation </div> </div> <p><br/></p> <h6 id="loss-05261">Loss: 0.5261</h6> <h6 id="accuracy-07787">Accuracy: 0.7787</h6> <p><br/></p> <p><br/></p> <h5 id="linear-evaluate---using-kidneysimagenet-1">Linear Evaluate - using Kidneys+ImageNet</h5> <p><br/></p> <div class="col"> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/kidneys_imgnet_25%25_acc-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/kidneys_imgnet_25%25_acc-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/kidneys_imgnet_25%25_acc-1400.webp"/> <img src="/assets/img/SimCLR/downstream/kidneys_imgnet_25%25_acc.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="kidneys_imgnet_25%_acc.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> ACC: Train &amp; Validation </div> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/kidneys_imgnet_25%25_loss-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/kidneys_imgnet_25%25_loss-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/kidneys_imgnet_25%25_loss-1400.webp"/> <img src="/assets/img/SimCLR/downstream/kidneys_imgnet_25%25_loss.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="kidneys_imgnet_25%_loss.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> Loss: Train &amp; Validation </div> </div> <p><br/></p> <h6 id="loss-05176">Loss: 0.5176</h6> <h6 id="accuracy-07977">Accuracy: 0.7977</h6> <hr/> <p><br/></p> <h3 id="50">50%</h3> <p><br/></p> <h5 id="dataset-table-2">Dataset Table</h5> <table> <thead> <tr> <th>Dataset for Pretext Task</th> <th>Train</th> </tr> </thead> <tbody> <tr> <td>Benign</td> <td>1540</td> </tr> <tr> <td>Atypical Ductal Hyperplasia</td> <td>1540</td> </tr> <tr> <td>Ductal Carcinoma In-Situ</td> <td>1540</td> </tr> <tr> <td>Total</td> <td>4620</td> </tr> </tbody> </table> <p><br/></p> <table> <thead> <tr> <th>Dataset for Evaluate</th> <th>Train</th> <th>Validation</th> <th>Test</th> </tr> </thead> <tbody> <tr> <td>Benign</td> <td>1247</td> <td>293</td> <td>1136</td> </tr> <tr> <td>Atypical Ductal Hyperplasia</td> <td>1243</td> <td>297</td> <td>1876</td> </tr> <tr> <td>Ductal Carcinoma In-Situ</td> <td>1206</td> <td>334</td> <td>770</td> </tr> <tr> <td>Total</td> <td>3696</td> <td>924</td> <td>3782</td> </tr> </tbody> </table> <p><br/></p> <h5 id="linear-evaluate---using-imagenet-2">Linear Evaluate - using ImageNet</h5> <p><br/></p> <div class="col"> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/mat_50%25_acc-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/mat_50%25_acc-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/mat_50%25_acc-1400.webp"/> <img src="/assets/img/SimCLR/downstream/mat_50%25_acc.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="50%_acc.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> ACC: Train &amp; Validation </div> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/mat_50%25_loss-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/mat_50%25_loss-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/mat_50%25_loss-1400.webp"/> <img src="/assets/img/SimCLR/downstream/mat_50%25_loss.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="50%_loss.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> Loss: Train &amp; Validation </div> </div> <p><br/></p> <h6 id="loss-02767">Loss: 0.2767</h6> <h6 id="accuracy-08879">Accuracy: 0.8879</h6> <p><br/></p> <p><br/></p> <h5 id="linear-evaluate---using-kidneys-2">Linear Evaluate - using Kidneys</h5> <p><br/></p> <div class="col"> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/kidneys_50%25_acc-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/kidneys_50%25_acc-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/kidneys_50%25_acc-1400.webp"/> <img src="/assets/img/SimCLR/downstream/kidneys_50%25_acc.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="kidneys_50%_acc.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> ACC: Train &amp; Validation </div> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/kidneys_50%25_loss-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/kidneys_50%25_loss-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/kidneys_50%25_loss-1400.webp"/> <img src="/assets/img/SimCLR/downstream/kidneys_50%25_loss.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="kidneys_50%_loss.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> Loss: Train &amp; Validation </div> </div> <p><br/></p> <h6 id="loss-04094">Loss: 0.4094</h6> <h6 id="accuracy-08355">Accuracy: 0.8355</h6> <p><br/></p> <p><br/></p> <h5 id="linear-evaluate---using-kidneysimagenet-2">Linear Evaluate - using Kidneys+ImageNet</h5> <p><br/></p> <div class="col"> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/kidneys_imgnet_50%25_acc-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/kidneys_imgnet_50%25_acc-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/kidneys_imgnet_50%25_acc-1400.webp"/> <img src="/assets/img/SimCLR/downstream/kidneys_imgnet_50%25_acc.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="kidneys_imgnet_50%_acc.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> ACC: Train &amp; Validation </div> <div class="col-lg mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SimCLR/downstream/kidneys_imgnet_50%25_loss-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SimCLR/downstream/kidneys_imgnet_50%25_loss-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SimCLR/downstream/kidneys_imgnet_50%25_loss-1400.webp"/> <img src="/assets/img/SimCLR/downstream/kidneys_imgnet_50%25_loss.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="kidneys_imgnet_50%_loss.png" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> Loss: Train &amp; Validation </div> </div> <p><br/></p> <h6 id="loss-04538">Loss: 0.4538</h6> <h6 id="accuracy-08279">Accuracy: 0.8279</h6> <hr/>]]></content><author><name></name></author><category term="experiment"/><category term="SimCLR"/><summary type="html"><![CDATA[SimCLR 선형회귀평가 결과입니다.]]></summary></entry><entry><title type="html">markdown images notes</title><link href="https://yeongjin96.github.io/blog/2023/notes/" rel="alternate" type="text/html" title="markdown images notes"/><published>2023-02-14T00:00:00+00:00</published><updated>2023-02-14T00:00:00+00:00</updated><id>https://yeongjin96.github.io/blog/2023/notes</id><content type="html" xml:base="https://yeongjin96.github.io/blog/2023/notes/"><![CDATA[<p>533 Every project has a beautiful feature showcase page. It’s easy to include images in a flexible 3-column grid format. Make your photos 1/3, 2/3, or full width.</p> <p>To give your project a background in the portfolio page, just add the img tag to the front matter like so:</p> <div class="row"> <div class="col-sm mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Rot_outcome/5%25_Pre_Acc-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Rot_outcome/5%25_Pre_Acc-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Rot_outcome/5%25_Pre_Acc-1400.webp"/> <img src="/assets/img/Rot_outcome/5%25_Pre_Acc.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> Pre_Acc </div> <div class="col-sm mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Rot_outcome/Rot+Jit_5%25_Down_Acc-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Rot_outcome/Rot+Jit_5%25_Down_Acc-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Rot_outcome/Rot+Jit_5%25_Down_Acc-1400.webp"/> <img src="/assets/img/Rot_outcome/Rot+Jit_5%25_Down_Acc.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> Down_Acc </div> </div> <div class="row"> <div class="col-sm mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Rot_outcome/Rot+Jit_5%25_Down_Loss-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Rot_outcome/Rot+Jit_5%25_Down_Loss-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Rot_outcome/Rot+Jit_5%25_Down_Loss-1400.webp"/> <img src="/assets/img/Rot_outcome/Rot+Jit_5%25_Down_Loss.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-2 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Rot_outcome/Rot+Jit_50%25_Pre_Loss-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Rot_outcome/Rot+Jit_50%25_Pre_Loss-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Rot_outcome/Rot+Jit_50%25_Pre_Loss-1400.webp"/> <img src="/assets/img/Rot_outcome/Rot+Jit_50%25_Pre_Loss.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="col"> <div class="col-lg mt-4 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Rot_outcome/5%25_Pre_Acc-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Rot_outcome/5%25_Pre_Acc-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Rot_outcome/5%25_Pre_Acc-1400.webp"/> <img src="/assets/img/Rot_outcome/5%25_Pre_Acc.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-lg mt-4 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Rot_outcome/Rot+Jit_5%25_Down_Acc-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Rot_outcome/Rot+Jit_5%25_Down_Acc-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Rot_outcome/Rot+Jit_5%25_Down_Acc-1400.webp"/> <img src="/assets/img/Rot_outcome/Rot+Jit_5%25_Down_Acc.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-lg mt-4 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Rot_outcome/Rot+Jit_5%25_Down_Loss-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Rot_outcome/Rot+Jit_5%25_Down_Loss-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Rot_outcome/Rot+Jit_5%25_Down_Loss-1400.webp"/> <img src="/assets/img/Rot_outcome/Rot+Jit_5%25_Down_Loss.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-lg mt-4 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Rot_outcome/Rot+Jit_50%25_Pre_Loss-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Rot_outcome/Rot+Jit_50%25_Pre_Loss-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Rot_outcome/Rot+Jit_50%25_Pre_Loss-1400.webp"/> <img src="/assets/img/Rot_outcome/Rot+Jit_50%25_Pre_Loss.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Caption photos easily. On the left, a road goes through a tunnel. Middle, leaves artistically fall in a hipster photoshoot. Right, in another hipster photoshoot, a lumberjack grasps a handful of pine needles. </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/5-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/5-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/5-1400.webp"/> <img src="/assets/img/5.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> This image can also have a caption. It's like magic. </div>]]></content><author><name></name></author><category term="work"/><summary type="html"><![CDATA[연습장 입니다.]]></summary></entry><entry><title type="html">SSL 실험결과(임시)</title><link href="https://yeongjin96.github.io/blog/2023/SSL-outcome/" rel="alternate" type="text/html" title="SSL 실험결과(임시)"/><published>2023-02-12T15:09:00+00:00</published><updated>2023-02-12T15:09:00+00:00</updated><id>https://yeongjin96.github.io/blog/2023/SSL-outcome</id><content type="html" xml:base="https://yeongjin96.github.io/blog/2023/SSL-outcome/"><![CDATA[<h3 id="unsupervised-representation-learning-by-predicting-image-rotations">Unsupervised Representation Learning by Predicting Image Rotations</h3> <details> <summary>5%</summary> ##### 5% Pretext-Loss ![5%_Pre_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/5%25_Pre_Loss-1676252081192-2.png) Pretext-Accuracy ![5%_Pre_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/5%25_Pre_Acc.png) DownStream-Loss ![5%_Down_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/5%25_Down_Loss-1676248398766-11.png) DownStream-Accuracy ![5%_Down_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/5%25_Down_Acc.png) ##### Test Loss 0.7344 / Acc 64.11% </details> <details> <summary>5%, lr=5e-6</summary> ##### 5%, lr=5e-6 Pretext-Loss ![Rot2_5%_Pre_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot2_5%25_Pre_Loss.png) Pretext-Accuracy ![Rot2_5%_Pre_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot2_5%25_Pre_Acc.png) DownStream-Loss ![Rot2_5%_Down_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot2_5%25_Down_Loss.png) DownStream-Accuracy ![Rot2_5%_Down_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot2_5%25_Down_Acc.png) ##### Test Loss 0.5962 / Acc 83.88% </details> <details> <summary>25%</summary> ##### 25% Pretext-Loss ![25%_Pre_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/25%25_Pre_Loss.png) Pretext-Accuracy ![25%_Pre_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/25%25_Pre_Acc.png) DownStream-Loss ![25%_Down_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/25%25_Down_Loss.png) DownStream-Accuracy ![25%_Down_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/25%25_Down_Acc.png) ##### Test Loss 0.3881 / Acc 84.51% </details> <details> <summary>25%, lr=5e-6</summary> ##### 25%, lr=5e-6 Pretext-Loss ![Rot2_25%_Pre_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot2_25%25_Pre_Loss.png) Pretext-Accuracy ![Rot2_25%_Pre_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot2_25%25_Pre_Acc.png) DownStream-Loss ![Rot2_25%_Down_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot2_25%25_Down_Loss.png) DownStream-Accuracy ![Rot2_25%_Down_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot2_25%25_Down_Acc.png) ##### Test Loss 0.3759 / Acc 90.91% </details> <details> <summary>50%</summary> ##### 50% Pretext-Loss ![50%_Pre_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/50%25_Pre_Loss.png) Pretext-Acc ![50%_Pre_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/50%25_Pre_Acc.png) DownStream-Loss ![50%_Down_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/50%25_Down_Loss.png) DownStream-Acc ![50%_Down_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/50%25_Down_Acc.png) ##### Test Loss 0.3864 / Acc 85.76% </details> <details> <summary>50%, lr=5e-6</summary> ##### 50%, lr=5e-6 Pretext-Loss ![Rot2_50%_Pre_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot2_50%25_Pre_Loss.png) Pretext-Acc ![Rot2_50%_Pre_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot2_50%25_Pre_Acc.png) DownStream-Loss ![Rot2_50%_Down_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot2_50%25_Down_Loss.png) DownStream-Acc ![Rot2_50%_Down_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot2_50%25_Down_Acc.png) ##### Test Loss 0.3128 / Acc 87.78% </details> <h3 id="rotnetjitter">RotNet+Jitter</h3> <details> <summary>5%</summary> ##### 5% Pretext-Loss ![Rot+Jit_5%_Pre_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit_5%25_Pre_Loss-1676253045630-5.png) Pretext-Acc ![Rot+Jit_5%_Pre_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit_5%25_Pre_Acc.png) DownStream-Loss ![Rot+Jit_5%_Down_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit_5%25_Down_Loss.png) DownStream-Acc ![Rot+Jit_5%_Down_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit_5%25_Down_Acc.png) ##### Test Loss 0.7760 / Acc 79.32% </details> <details> <summary>5%, lr=5e-6</summary> ##### 5%, lr=5e-6 Pretext-Loss ![Rot+Jit2_5%_Pre_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit2_5%25_Pre_Loss.png) Pretext-Acc ![Rot+Jit2_5%_Pre_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit2_5%25_Pre_Acc.png) DownStream-Loss ![Rot+Jit2_5%_Down_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit2_5%25_Down_Loss.png) DownStream-Acc ![Rot+Jit2_5%_Down_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit2_5%25_Down_Acc.png) ##### Test Loss 0.7794 / Acc 79.16% </details> <details> <summary>25%</summary> ##### 25% Pretext-Loss ![Rot+Jit_25%_Pre_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit_25%25_Pre_Loss.png) Pretext-Acc ![Rot+Jit_25%_Pre_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit_25%25_Pre_Acc.png) DownStream-Loss ![Rot+Jit_25%_Down_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit_25%25_Down_Loss.png) DownStream-Acc ![Rot+Jit_25%_Down_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit_25%25_Down_Acc.png) ##### Test Loss 0.3466 / Acc 86.64% </details> <details> <summary>25%, lr=5e-6</summary> ##### 25%, lr=5e-6 Pretext-Loss ![Rot+Jit2_25%_Pre_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit2_25%25_Pre_Loss.png) Pretext-Acc ![Rot+Jit2_25%_Pre_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit2_25%25_Pre_Acc.png) DownStream-Loss ![Rot+Jit2_25%_Down_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit2_25%25_Down_Loss.png) DownStream-Acc ![Rot+Jit2_25%_Down_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit2_25%25_Down_Acc.png) ##### Test Loss 0.4978 / Acc 86.38% </details> <details> <summary>50%</summary> ##### 50% Pretext-Loss ![Rot+Jit_50%_Pre_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit_50%25_Pre_Loss.png) Pretext-Acc ![Rot+Jit_50%_Pre_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit_50%25_Pre_Acc.png) DownStream-Loss ![Rot+Jit_50%_Down_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit_50%25_Down_Loss.png) DownStream-Acc ![Rot+Jit_50%_Down_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit_50%25_Down_Acc.png) ##### Test Loss 0.2897 / Acc 89.40% </details> <details> <summary>50%, lr=5e-6</summary> ##### 50%, lr=5e-6 Pretext-Loss ![Rot+Jit2_50%_Pre_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit2_50%25_Pre_Loss.png) Pretext-Acc ![Rot+Jit2_50%_Pre_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit2_50%25_Pre_Acc.png) DownStream-Loss ![Rot+Jit2_50%_Down_Loss](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit2_50%25_Down_Loss.png) DownStream-Acc ![Rot+Jit2_50%_Down_Acc](https://raw.githubusercontent.com/YeongJin96/YeongJin96.github.io/master/assets/img/Rot_outcome/Rot%2BJit2_50%25_Down_Acc.png) ##### Test Loss 0.3934 / Acc 90.80% </details> <p><br/></p> <h5 id="test-rotation--rotation--jitter">Test (Rotation &amp; Rotation + Jitter)</h5> <p>Encoder인 ResNet50의 학습가중치를 고정하지 않고(unfreeze) MLP와 함께 학습해 얻은 Rotation과 Rotation+Jitter의 결과입니다.</p> <p>Rotation의 경우 원본이미지를 0°, 90°, 180°, 270° 회전시킨 뒤, Pretext task에서 예측하도록 학습한 뒤, Downstream에서 label을 주고 학습하였습니다.</p> <p>Rotation+Jitter의 경우 Rotation Pretext task에 각 회전마다 다른 Jitter augmentation을 적용시켜 회전시킨 이미지를 예측하도록 학습한 뒤, Downstream에서 label을 주고 학습하였습니다.</p> <table> <thead> <tr> <th>Loss/Acc</th> <th>Rotation</th> <th>Rotation+Jitter</th> </tr> </thead> <tbody> <tr> <td>5%</td> <td>0.7344 / 64.11%</td> <td>0.7760 / 79.32%</td> </tr> <tr> <td>25%</td> <td>0.3881 / 84.51%</td> <td>0.3466 / 86.64%</td> </tr> <tr> <td>50%</td> <td>0.3864 / 85.76%</td> <td>0.2897 / 89.40%</td> </tr> </tbody> </table> <p>lr_schedular를 사용하지 않고 고정 lr = 0.000005로 학습시</p> <table> <thead> <tr> <th>Loss/Acc</th> <th>Rotation</th> <th>Rotation+Jitter</th> </tr> </thead> <tbody> <tr> <td>5%</td> <td>0.5962 / 83.88%</td> <td>0.7794 / 79.16%</td> </tr> <tr> <td>25%</td> <td>0.3759 / 90.91%</td> <td>0.4978 / 86.38%</td> </tr> <tr> <td>50%</td> <td>0.3128 / 87.78%</td> <td>0.3934 / 90.80%</td> </tr> </tbody> </table> <p><br/></p> <p><br/></p> <p>Encoder인 ResNet50의 학습가중치를 고정하고(freeze) Downstream에서 MLP만 학습해 얻은 Rotation과 Rotation+Jitter의 결과입니다.</p> <h5 id="test-rotation--rotation--jitter-1">Test (Rotation &amp; Rotation + Jitter)</h5> <table> <thead> <tr> <th>Loss/Acc</th> <th>Rotation (Encoder freeze)</th> <th>Rotation+Jitter (Encoder freeze)</th> </tr> </thead> <tbody> <tr> <td>5%</td> <td>0.9604 / 50.28%</td> <td>0.7794 / 79.16%</td> </tr> <tr> <td>25%</td> <td>0.7235 / 67.99%</td> <td>0.7713 / 64.60%</td> </tr> <tr> <td>50%</td> <td>1.0940 / 38.56%</td> <td>0.7783 / 62.57%</td> </tr> </tbody> </table> <p><br/></p> <p><br/></p> <p>SimCLR으로 학습한 결과입니다.</p> <ol> <li>ImageNet의 가중치를 가져와 보유하고있는 의료 데이터셋(유방암)으로 Pretext task를 진행하였습니다.<br/></li> <li>ImageNet의 가중치 없이 유방암 패치가 아닌 신장 패치데이터(약 15만장)로 Pretext task후, 보유하고 있는 데이터로 mlp를 학습하였습니다.<br/></li> <li>ImageNet의 가중치를 가져와 신장 패치데이터를 Pretext task후, 보유하고 있는 데이터(유방암)로 mlp를 학습하였습니다.<br/></li> <li>2와 같이 가중치 없이 신장 데이터로 Pretext task후, 학습된 가중치에 보유하고 있는 데이터셋(유방암)으로 한번 더 Pretext task를 진행한 뒤, 보유하고 있는 데이터로 mlp를 학습하였습니다.<br/></li> <li>3과 같이 ImageNet가중치를 가져와 신장데이터로 Ptrext task후, 보유하고 있는 데이터셋(유방암)으로 한번 더 Pretext task를 진행한 뒤, 보유하고 있는 데이터로 mlp를 학습하였습니다.<br/></li> </ol> <h5 id="test-simclr">Test (SimCLR)</h5> <table> <thead> <tr> <th>Loss/Acc</th> <th>1. SimCLR (dataset + ImageNet)</th> <th>2. SimCLR (kidneys dataset)</th> <th>3. SimCLR (kidneys dataset + ImageNet)</th> <th>4. (kidneys+dataset)</th> <th>5. (kidneys+ImageNet+dataset)</th> </tr> </thead> <tbody> <tr> <td>5%</td> <td>0.5545 / 75.59%</td> <td>0.6162 / 73.62%</td> <td>0.7177 / 69.64%</td> <td>0.5309 / 76.97%</td> <td>0.4881 / 80.65%</td> </tr> <tr> <td>25%</td> <td>0.3569 / 84.80%</td> <td>0.5261 / 77.87%</td> <td>0.5176 / 79.77%</td> <td>0.3193 / 87.50%</td> <td>0.2785 / 88.96%</td> </tr> <tr> <td>50%</td> <td>0.2767 / 88.79%</td> <td>0.4094 / 83.55%</td> <td>0.4538 / 82.79%</td> <td>0.2686 / 89.46%</td> <td>0.2229 / 91.50%</td> </tr> </tbody> </table> <p>#Supervised 학습시</p> <table> <thead> <tr> <th>Data size</th> <th>Loss</th> <th>Accuracy</th> </tr> </thead> <tbody> <tr> <td>5%</td> <td>1.595</td> <td>67.10%</td> </tr> <tr> <td>25%</td> <td>0.5947</td> <td>83.15%</td> </tr> <tr> <td>50%</td> <td>0.5538</td> <td>88.70%</td> </tr> </tbody> </table>]]></content><author><name></name></author><category term="Experimentd"/><category term="SSL"/><summary type="html"><![CDATA[Self Supervisied Learn모델 실험 결과입니다.]]></summary></entry><entry><title type="html">(SSL)1.Data_split</title><link href="https://yeongjin96.github.io/blog/2023/SSL_data_split/" rel="alternate" type="text/html" title="(SSL)1.Data_split"/><published>2023-01-31T19:09:00+00:00</published><updated>2023-01-31T19:09:00+00:00</updated><id>https://yeongjin96.github.io/blog/2023/SSL_data_split</id><content type="html" xml:base="https://yeongjin96.github.io/blog/2023/SSL_data_split/"><![CDATA[<ol> <li>원본데이터중 x40(magnification) 이미지만 사용</li> <li>train_test ratio를 7:3으로 함</li> <li>dataset의 imbalance를 막기 위해, dataset의 크기가 가장 작은 클래스를 중점으로 class당 dataset크기를 재조정</li> <li>train 데이터를 100%, 70%, 50%, 30%만 사용하도록 분할</li> </ol> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">glob</span> <span class="kn">import</span> <span class="n">glob</span>
<span class="kn">import</span> <span class="n">shutil</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">random</span>
<span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ori_path</span> <span class="o">=</span> <span class="s">"/home/yj/workspace/SimCLR/data/PNU/"</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">for </span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span><span class="p">)</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">walk</span><span class="p">(</span><span class="n">ori_path</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"# root : "</span> <span class="o">+</span> <span class="n">root</span><span class="p">)</span>
    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">dirs</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">dir_name</span> <span class="ow">in</span> <span class="n">dirs</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"dir: "</span> <span class="o">+</span> <span class="n">dir_name</span><span class="p">)</span>

    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">files</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"file: "</span> <span class="o">+</span> <span class="n">files</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># root : /home/yj/workspace/SimCLR/data/PNU/
dir: Atypical Ductal Hyperplasia
dir: Ductal Carcinoma In-Situ
dir: Normal
# root : /home/yj/workspace/SimCLR/data/PNU/Atypical Ductal Hyperplasia
dir: S15-3188_B
dir: S14-7332_B
dir: S11-3325_B
dir: S11-8600_B
dir: S15-9038_B
dir: S11-4889_B
dir: S12-8459_B
# root : /home/yj/workspace/SimCLR/data/PNU/Atypical Ductal Hyperplasia/S15-3188_B
dir: x5
dir: x40
dir: x10
# root : /home/yj/workspace/SimCLR/data/PNU/Atypical Ductal Hyperplasia/S15-3188_B/x5
file: S15-3188_B x5 (116).png
file: S15-3188_B x5 (138).png
file: S15-3188_B x5 (109).png
# root : /home/yj/workspace/SimCLR/data/PNU/Atypical Ductal Hyperplasia/S15-3188_B/x40
file: S15-3188_B x40(31).png
file: S15-3188_B x40(1534).png
file: S15-3188_B x40(720).png
# root : /home/yj/workspace/SimCLR/data/PNU/Atypical Ductal Hyperplasia/S15-3188_B/x10
file: S15-3188_B x10 (42).png
file: S15-3188_B x10 (53).png
file: S15-3188_B x10 (287).png
# root : /home/yj/workspace/SimCLR/data/PNU/Atypical Ductal Hyperplasia/S14-7332_B
dir: x5
dir: x40
dir: x10
'
'
'
# root : /home/yj/workspace/SimCLR/data/PNU/Normal/S14-8521_A/x10
file: S14-8521_A x10 (13).png
file: S14-8521_A x10 (32).png
file: S14-8521_A x10 (10).png
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">class_list</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">ori_path</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">class_list</span><span class="p">)</span>

<span class="n">class_path</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">class_list</span><span class="p">)):</span>
    <span class="n">class_path</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">ori_path</span><span class="o">+</span><span class="s">"/"</span><span class="o">+</span><span class="n">class_list</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"path:"</span><span class="p">,</span><span class="n">class_path</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['Atypical Ductal Hyperplasia', 'Ductal Carcinoma In-Situ', 'Normal']
path: /home/yj/workspace/SimCLR/data/PNU//Atypical Ductal Hyperplasia
path: /home/yj/workspace/SimCLR/data/PNU//Ductal Carcinoma In-Situ
path: /home/yj/workspace/SimCLR/data/PNU//Normal
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">Extract_name</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
    <span class="n">tmp</span> <span class="o">=</span> <span class="n">path</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s">"/"</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">tmp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div> <p>dataset의 train_test 비율을 셔플 후, 8:2로 나눔</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">Train_test_split</span><span class="p">(</span><span class="n">ori_path</span><span class="p">,</span> <span class="n">class_path</span><span class="p">,</span> <span class="n">save_path</span><span class="p">,</span> <span class="n">ratio</span><span class="o">=</span><span class="mf">0.8</span><span class="p">):</span>
    <span class="n">train_path</span> <span class="o">=</span> <span class="n">save_path</span><span class="o">+</span><span class="s">"train"</span>
    <span class="n">test_path</span> <span class="o">=</span> <span class="n">save_path</span><span class="o">+</span><span class="s">"test"</span>
    
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">train_path</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">test_path</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"save_path: "</span><span class="p">,</span> <span class="n">save_path</span><span class="p">)</span>
    
    <span class="n">class_</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">class_</span> <span class="ow">in</span> <span class="n">class_path</span><span class="p">:</span>
        <span class="n">class_name</span> <span class="o">=</span> <span class="nc">Extract_name</span><span class="p">(</span><span class="n">class_</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">train_path</span><span class="o">+</span><span class="s">"/"</span><span class="o">+</span><span class="n">class_name</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">test_path</span><span class="o">+</span><span class="s">"/"</span><span class="o">+</span><span class="n">class_name</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">glob_file</span> <span class="o">=</span> <span class="nf">glob</span><span class="p">(</span><span class="n">ori_path</span><span class="o">+</span><span class="n">class_name</span><span class="o">+</span><span class="s">"/**/x40/**.png"</span><span class="p">,</span> <span class="n">recursive</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">random</span><span class="p">.</span><span class="nf">shuffle</span><span class="p">(</span><span class="n">glob_file</span><span class="p">)</span>
        
        <span class="n">total_size</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">glob_file</span><span class="p">)</span>
        <span class="n">train_size</span> <span class="o">=</span> <span class="nf">round</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">glob_file</span><span class="p">)</span> <span class="o">*</span> <span class="n">ratio</span><span class="p">)</span>
        <span class="n">test_size</span> <span class="o">=</span> <span class="n">total_size</span> <span class="o">-</span> <span class="n">train_size</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">glob_file</span><span class="p">)):</span>
            <span class="n">img_name</span> <span class="o">=</span> <span class="nc">Extract_name</span><span class="p">(</span><span class="n">glob_file</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            
            <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">train_size</span><span class="p">:</span>
                <span class="n">shutil</span><span class="p">.</span><span class="nf">copy2</span><span class="p">(</span><span class="n">glob_file</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">train_path</span><span class="o">+</span><span class="s">"/"</span><span class="o">+</span><span class="n">class_name</span><span class="o">+</span><span class="s">"/"</span><span class="o">+</span><span class="n">img_name</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">shutil</span><span class="p">.</span><span class="nf">copy2</span><span class="p">(</span><span class="n">glob_file</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">test_path</span><span class="o">+</span><span class="s">"/"</span><span class="o">+</span><span class="n">class_name</span><span class="o">+</span><span class="s">"/"</span><span class="o">+</span><span class="n">img_name</span><span class="p">)</span>
                
        <span class="nf">print</span><span class="p">(</span><span class="s">"{}'s dataset_size</span><span class="se">\n</span><span class="s"> train: {}</span><span class="se">\n</span><span class="s"> test: {}</span><span class="se">\n</span><span class="s"> total: {}"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">class_name</span><span class="p">,</span> <span class="n">train_size</span><span class="p">,</span> <span class="n">test_size</span><span class="p">,</span> <span class="n">total_size</span><span class="p">))</span>
        
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># def Shutil_copy(new_path, min_size, save_path):
#     compare_list = []
#     for class_ in new_path:
#         class_name = Extract_name(class_)
#         os.makedirs(save_path+class_name, exist_ok=True)
#         glob_file = glob(new_path+class_name+"/**/**.png", recursive=True)
#         random.shuffle(glob_file)
</span>        
<span class="c1">#         for i in range(min_size):
#             img_name = Extract_name(glob_file[i])
#             shutil.copy2(glob_file[i], save_path+class_name+"/"+img_name)
</span></code></pre></div></div> <p>dataset에서 test_dataset을 분리후, 나머지 train_dataset중 가장 적은 클래스 data_size와 다른 클래스들의 data_size를 동일하게 함</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">Compare_size</span><span class="p">(</span><span class="n">train_path</span><span class="p">):</span>
    <span class="n">class_list</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">train_path</span><span class="p">)</span>
    
    <span class="n">compare_list</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">class_</span> <span class="ow">in</span> <span class="n">class_list</span><span class="p">:</span>
        <span class="n">compare_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="nf">glob</span><span class="p">(</span><span class="n">train_path</span><span class="o">+</span><span class="n">class_</span><span class="o">+</span><span class="s">"/*.png"</span><span class="p">)))</span>
        
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">min</span><span class="p">(</span><span class="n">compare_list</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">save_path</span> <span class="o">=</span> <span class="s">"../data/PNU/"</span>
<span class="nc">Train_test_split</span><span class="p">(</span><span class="n">ori_path</span><span class="p">,</span> <span class="n">class_path</span><span class="p">,</span> <span class="n">save_path</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>save_path:  ../data/PNU/
Atypical Ductal Hyperplasia's dataset_size
 train: 7505
 test: 1876
 total: 9381
Ductal Carcinoma In-Situ's dataset_size
 train: 3079
 test: 770
 total: 3849
Normal's dataset_size
 train: 4542
 test: 1136
 total: 5678
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train_path</span> <span class="o">=</span> <span class="n">save_path</span><span class="o">+</span><span class="s">"train/"</span>
<span class="n">readjust_train_path</span> <span class="o">=</span> <span class="s">"../data/train_%100"</span>
<span class="n">min_size</span> <span class="o">=</span> <span class="nc">Compare_size</span><span class="p">(</span><span class="n">train_path</span><span class="p">)</span>

<span class="k">for</span> <span class="n">class_</span> <span class="ow">in</span> <span class="n">class_list</span><span class="p">:</span>
    <span class="n">img_path_list</span> <span class="o">=</span> <span class="nf">glob</span><span class="p">(</span><span class="n">train_path</span><span class="o">+</span><span class="n">class_</span><span class="o">+</span><span class="s">"/*.png"</span><span class="p">)</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">readjust_train_path</span><span class="o">+</span><span class="s">"/"</span><span class="o">+</span><span class="n">class_</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">min_size</span><span class="p">):</span>
        <span class="n">img_name</span> <span class="o">=</span> <span class="nc">Extract_name</span><span class="p">(</span><span class="n">img_path_list</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="n">shutil</span><span class="p">.</span><span class="nf">copy2</span><span class="p">(</span><span class="n">img_path_list</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">readjust_train_path</span><span class="o">+</span><span class="s">"/"</span><span class="o">+</span><span class="n">class_</span><span class="o">+</span><span class="s">"/"</span><span class="o">+</span><span class="n">img_name</span><span class="p">)</span>
</code></pre></div></div> <p>재조정된 train_data중 30%, 50%, 70%만 사용하기 위해, 각각의 데이터셋을 새로 만듦</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">Ratio_split</span><span class="p">(</span><span class="n">train_path</span><span class="p">,</span> <span class="n">ratio</span><span class="p">):</span>
    <span class="n">new_path</span> <span class="o">=</span> <span class="s">"../data/train_%"</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="s">"%g"</span> <span class="o">%</span><span class="p">(</span><span class="n">ratio</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">new_path</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    
    <span class="n">class_list</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">train_path</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">class_</span> <span class="ow">in</span> <span class="n">class_list</span><span class="p">:</span>
        <span class="n">file_list</span> <span class="o">=</span> <span class="nf">glob</span><span class="p">(</span><span class="n">train_path</span><span class="o">+</span><span class="s">"/"</span><span class="o">+</span><span class="n">class_</span><span class="o">+</span><span class="s">"/*.png"</span><span class="p">)</span>
        <span class="n">random</span><span class="p">.</span><span class="nf">shuffle</span><span class="p">(</span><span class="n">file_list</span><span class="p">)</span>
        <span class="n">num_data</span> <span class="o">=</span> <span class="nf">round</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">file_list</span><span class="p">)</span> <span class="o">*</span> <span class="n">ratio</span><span class="p">)</span>
        
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">new_path</span><span class="o">+</span><span class="s">"/"</span><span class="o">+</span><span class="n">class_</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">num_data</span><span class="p">):</span>
            <span class="n">img_name</span> <span class="o">=</span> <span class="nc">Extract_name</span><span class="p">(</span><span class="n">file_list</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="n">shutil</span><span class="p">.</span><span class="nf">copy2</span><span class="p">(</span><span class="n">file_list</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">new_path</span><span class="o">+</span><span class="s">"/"</span><span class="o">+</span><span class="n">class_</span><span class="o">+</span><span class="s">"/"</span><span class="o">+</span><span class="n">img_name</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Ratio_split</span><span class="p">(</span><span class="n">readjust_train_path</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">)</span>
<span class="nc">Ratio_split</span><span class="p">(</span><span class="n">readjust_train_path</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">)</span>
<span class="nc">Ratio_split</span><span class="p">(</span><span class="n">readjust_train_path</span><span class="p">,</span> <span class="mf">0.7</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="s">"data_30% size:"</span><span class="p">,</span><span class="nf">len</span><span class="p">(</span><span class="nf">glob</span><span class="p">(</span><span class="s">"../data/train_%30/**/**.png"</span><span class="p">,</span> <span class="n">recursive</span><span class="o">=</span><span class="bp">True</span><span class="p">)))</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"data_50% size:"</span><span class="p">,</span><span class="nf">len</span><span class="p">(</span><span class="nf">glob</span><span class="p">(</span><span class="s">"../data/train_%50/**/**.png"</span><span class="p">,</span> <span class="n">recursive</span><span class="o">=</span><span class="bp">True</span><span class="p">)))</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"data_70% size:"</span><span class="p">,</span><span class="nf">len</span><span class="p">(</span><span class="nf">glob</span><span class="p">(</span><span class="s">"../data/train_%70/**/**.png"</span><span class="p">,</span> <span class="n">recursive</span><span class="o">=</span><span class="bp">True</span><span class="p">)))</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"data_100% size:"</span><span class="p">,</span><span class="nf">len</span><span class="p">(</span><span class="nf">glob</span><span class="p">(</span><span class="s">"../data/train_%100/**/**.png"</span><span class="p">,</span> <span class="n">recursive</span><span class="o">=</span><span class="bp">True</span><span class="p">)))</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>data_30% size: 2772
data_50% size: 4620
data_70% size: 6465
data_100% size: 9237
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>]]></content><author><name></name></author><category term="code"/><category term="data_preprocess"/><category term="SSL"/><summary type="html"><![CDATA[실험에 사용할 data를 나눈 코드입니다.]]></summary></entry><entry><title type="html">SimCLR 학습결과</title><link href="https://yeongjin96.github.io/blog/2023/SimCLR_outcome/" rel="alternate" type="text/html" title="SimCLR 학습결과"/><published>2023-01-18T19:09:00+00:00</published><updated>2023-01-18T19:09:00+00:00</updated><id>https://yeongjin96.github.io/blog/2023/SimCLR_outcome</id><content type="html" xml:base="https://yeongjin96.github.io/blog/2023/SimCLR_outcome/"><![CDATA[<p>SimCLR 모델을 Epochs와 Batch 그리고 Optimizer에 차이를 두고 학습한 결과입니다.</p> <p>학습에 사용한 Parameters는 다음과 같습니다.</p> <p><br/></p> <p><br/></p> <p><br/></p> <h3 id="augmentation">Augmentation</h3> <p>torchvision.transforms 라이브러리를 사용해 Augmentation 했고, 코드는 다음과 같습니다. <br/></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TransformsSimCLR</span><span class="p">:</span>
    <span class="s">"""
    A stochastic data augmentation module that transforms any given data example randomly
    resulting in two correlated views of the same example,
    denoted x ̃i and x ̃j, which we consider as a positive pair.
    """</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
        <span class="n">s</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">color_jitter</span> <span class="o">=</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">ColorJitter</span><span class="p">(</span>
            <span class="mf">0.8</span> <span class="o">*</span> <span class="n">s</span><span class="p">,</span> <span class="mf">0.8</span> <span class="o">*</span> <span class="n">s</span><span class="p">,</span> <span class="mf">0.8</span> <span class="o">*</span> <span class="n">s</span><span class="p">,</span> <span class="mf">0.2</span> <span class="o">*</span> <span class="n">s</span>
        <span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">train_transform</span> <span class="o">=</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">Compose</span><span class="p">(</span>
            <span class="p">[</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">RandomResizedCrop</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="n">size</span><span class="p">),</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">RandomHorizontalFlip</span><span class="p">(),</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">RandomApply</span><span class="p">([</span><span class="n">color_jitter</span><span class="p">],</span> <span class="n">p</span><span class="o">=</span><span class="mf">0.8</span><span class="p">),</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">RandomGrayscale</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="mf">0.2</span><span class="p">),</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">ToTensor</span><span class="p">(),</span>
            <span class="p">]</span>
        <span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">test_transform</span> <span class="o">=</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">Compose</span><span class="p">(</span>
            <span class="p">[</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">Resize</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="n">size</span><span class="p">),</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">ToTensor</span><span class="p">(),</span>
            <span class="p">]</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">train_transform</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="nf">train_transform</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div> <p><br/></p> <p>Color_Jitter([</p> <p><strong>brightness</strong>, <strong>contrast</strong>, <strong>saturation</strong>, <strong>hue</strong> = 0.8</p> <p>]) #해당 값들을 (1-0.8) ~ (1+0.8)의 범위를 적용확률 0.8로 augmentation</p> <p><br/></p> <p><strong>Resized&amp;Crop</strong> = 0.08 ~ 1.0의 비율중 랜덤하게 Crop한 후 0.75 ~ 1.3333의 비율로 너비와 높이를 줄이거나 늘린후 원본 이미지 size로 만듬</p> <p><br/></p> <p><strong>HorizontalFlip</strong> = Random(0.5)으로 이미지를 Flip</p> <p><br/></p> <p><strong>Grayscale</strong> = Random(0.2)으로 이미지를 Grayscale</p> <p><br/></p> <p>해당 방법으로 데이터셋 이미지 1개를 각각 다른이미지로 Augmentation 후 학습. <br/> <br/> <br/></p> <h3 id="model--batch-optimizer">Model &amp; Batch, Optimizer</h3> <p><br/> SimCLR 학습에 사용한 encoder모델은 <strong>ResNet18</strong>과 <strong>ResNet50</strong>을 사용했습니다.</p> <p>Batch <strong>64, 128, 256</strong>에 나누어 진행했고, <strong>LARS</strong>와 <strong>Adam</strong> Optimizer를 각각 적용했습니다.</p> <p><br/></p> <p><br/></p> <p><br/></p> <h3 id="outcome">Outcome</h3> <p><br/></p> <p>SimCLR_train code: <a href="https://yeongjin96.github.io/blog/2023/SimCLR_train/">Train코드 링크</a></p> <p>SimCLR_evaluate code: <a href="https://yeongjin96.github.io/blog/2023/simCLR_evaluate/">Evaluate코드 링크</a></p> <p><br/></p> <p><br/></p> <h4 id="resnet18-lars">ResNet18 (LARS)</h4> <p><br/></p> <table> <thead> <tr> <th style="text-align: center">데이터 갯수</th> <th style="text-align: center">Batch_size</th> <th style="text-align: center">Loss</th> <th style="text-align: center">Accuracy</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">300</td> <td style="text-align: center">64</td> <td style="text-align: center">0.629</td> <td style="text-align: center">0.7103</td> </tr> <tr> <td style="text-align: center">300</td> <td style="text-align: center">128</td> <td style="text-align: center">0.6260</td> <td style="text-align: center">0.7209</td> </tr> <tr> <td style="text-align: center">300</td> <td style="text-align: center">256</td> <td style="text-align: center">0.6140</td> <td style="text-align: center">0.7251</td> </tr> <tr> <td style="text-align: center">500</td> <td style="text-align: center">64</td> <td style="text-align: center">0.6206</td> <td style="text-align: center">0.7310</td> </tr> <tr> <td style="text-align: center">500</td> <td style="text-align: center">128</td> <td style="text-align: center">0.5709</td> <td style="text-align: center">0.7502</td> </tr> <tr> <td style="text-align: center">500</td> <td style="text-align: center">256</td> <td style="text-align: center">0.5472</td> <td style="text-align: center">0.7619</td> </tr> <tr> <td style="text-align: center">1000</td> <td style="text-align: center">64</td> <td style="text-align: center">0.5495</td> <td style="text-align: center">0.7622</td> </tr> <tr> <td style="text-align: center">1000</td> <td style="text-align: center">128</td> <td style="text-align: center">0.5280</td> <td style="text-align: center">0.7678</td> </tr> <tr> <td style="text-align: center">1000</td> <td style="text-align: center">256</td> <td style="text-align: center">0.4706</td> <td style="text-align: center">0.8032</td> </tr> <tr> <td style="text-align: center">1500</td> <td style="text-align: center">64</td> <td style="text-align: center">0.4944</td> <td style="text-align: center">0.7943</td> </tr> <tr> <td style="text-align: center">1500</td> <td style="text-align: center">128</td> <td style="text-align: center">0.4276</td> <td style="text-align: center">0.8152</td> </tr> <tr> <td style="text-align: center">1500</td> <td style="text-align: center">256</td> <td style="text-align: center">0.3936</td> <td style="text-align: center">0.8362</td> </tr> </tbody> </table> <p><br/></p> <p><br/></p> <p><br/></p> <p><br/></p> <p><br/></p> <h4 id="reference">Reference</h4> <p><a href="https://github.com/Spijkervet/SimCLR">https://github.com/Spijkervet/SimCLR</a></p>]]></content><author><name></name></author><category term="Experiment"/><category term="SimCLR"/><summary type="html"><![CDATA[SimCLR 모델을 Epochs와 Batch 그리고 Optimizer에 차이를 두고 학습한 결과입니다.]]></summary></entry><entry><title type="html">SimCLR_train code</title><link href="https://yeongjin96.github.io/blog/2023/SimCLR_train/" rel="alternate" type="text/html" title="SimCLR_train code"/><published>2023-01-18T15:09:00+00:00</published><updated>2023-01-18T15:09:00+00:00</updated><id>https://yeongjin96.github.io/blog/2023/SimCLR_train</id><content type="html" xml:base="https://yeongjin96.github.io/blog/2023/SimCLR_train/"><![CDATA[<p>SimCLR 학습 코드입니다.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">import</span> <span class="n">torchvision</span>
<span class="kn">import</span> <span class="n">torch.nn</span> <span class="k">as</span> <span class="n">nn</span>
<span class="kn">import</span> <span class="n">os</span>
</code></pre></div></div> <p>torchvision의 transforms을 사용해서, 이미지 Augmentation을 생성하는 클래스입니다.</p> <p>train_transform은 train용 augmentation으로, resize&amp;crop, flip, color_jitter를 사용했고, 0.2의 확률로 grayscale로 변환한 뒤, 텐서로 만들고, SimCLR은 1개의 이미지당 2개의 augmentation 이미지를 필요로 하므로, 같은 transform으로 두개의 이미지를 return합니다.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TransformsSimCLR</span><span class="p">:</span>
    <span class="s">"""
    A stochastic data augmentation module that transforms any given data example randomly
    resulting in two correlated views of the same example,
    denoted x ̃i and x ̃j, which we consider as a positive pair.
    """</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
        <span class="n">s</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">color_jitter</span> <span class="o">=</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">ColorJitter</span><span class="p">(</span>
            <span class="mf">0.8</span> <span class="o">*</span> <span class="n">s</span><span class="p">,</span> <span class="mf">0.8</span> <span class="o">*</span> <span class="n">s</span><span class="p">,</span> <span class="mf">0.8</span> <span class="o">*</span> <span class="n">s</span><span class="p">,</span> <span class="mf">0.2</span> <span class="o">*</span> <span class="n">s</span>
        <span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">train_transform</span> <span class="o">=</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">Compose</span><span class="p">(</span>
            <span class="p">[</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">RandomResizedCrop</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="n">size</span><span class="p">),</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">RandomHorizontalFlip</span><span class="p">(),</span>  <span class="c1"># with 0.5 probability
</span>                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">RandomApply</span><span class="p">([</span><span class="n">color_jitter</span><span class="p">],</span> <span class="n">p</span><span class="o">=</span><span class="mf">0.8</span><span class="p">),</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">RandomGrayscale</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="mf">0.2</span><span class="p">),</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">ToTensor</span><span class="p">(),</span>
            <span class="p">]</span>
        <span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">test_transform</span> <span class="o">=</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">Compose</span><span class="p">(</span>
            <span class="p">[</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">Resize</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="n">size</span><span class="p">),</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">ToTensor</span><span class="p">(),</span>
            <span class="p">]</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">train_transform</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="nf">train_transform</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div> <p>Github에는 yaml파일로 parameters를 불러오는 방식을 사용했지만, yaml파일 없이 코드실행을 위해 따로 parameters를 정의했습니다.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">torchvision.datasets</span> <span class="kn">import</span> <span class="n">ImageFolder</span>
<span class="n">input_size</span> <span class="o">=</span> <span class="mi">224</span>
<span class="n">batch_size</span> <span class="o">=</span> <span class="mi">128</span>
<span class="n">weight_decay</span> <span class="o">=</span> <span class="mf">1e-06</span>
<span class="n">epochs</span> <span class="o">=</span> <span class="mi">500</span>
<span class="n">model_path</span> <span class="o">=</span> <span class="s">"../save_models"</span>
<span class="n">current_epoch</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">temperature</span> <span class="o">=</span> <span class="mf">0.5</span>
</code></pre></div></div> <p>Dataset정의</p> <p>가장 위에 정의했던 transfrom클래스를 사용해 이미지들을 augmentation후, data_loader를 만듭니다.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train_dataset</span> <span class="o">=</span> <span class="nc">ImageFolder</span><span class="p">(</span><span class="n">root</span><span class="o">=</span><span class="s">'../data/PNU_all'</span><span class="p">,</span> <span class="n">transform</span><span class="o">=</span><span class="nc">TransformsSimCLR</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="n">input_size</span><span class="p">))</span>
<span class="n">train_loader</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nc">DataLoader</span><span class="p">(</span><span class="n">train_dataset</span><span class="p">,</span>
                                           <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> 
                                           <span class="n">shuffle</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> 
                                           <span class="n">num_workers</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>
                                           <span class="n">drop_last</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div> <p>pytorch에 정의되어있는 resnet18과 resnet50을 입력에 따라 불러옵니다.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_resnet</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">pretrained</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="n">resnets</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">"resnet18"</span><span class="p">:</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">models</span><span class="p">.</span><span class="nf">resnet18</span><span class="p">(</span><span class="n">pretrained</span><span class="o">=</span><span class="n">pretrained</span><span class="p">),</span>
        <span class="s">"resnet50"</span><span class="p">:</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">models</span><span class="p">.</span><span class="nf">resnet50</span><span class="p">(</span><span class="n">pretrained</span><span class="o">=</span><span class="n">pretrained</span><span class="p">),</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">resnets</span><span class="p">.</span><span class="nf">keys</span><span class="p">():</span>
        <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s"> is not a valid ResNet version"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">resnets</span><span class="p">[</span><span class="n">name</span><span class="p">]</span>
</code></pre></div></div> <p>입력으로 받은것을 그대로 return해주는 Identity클래스 입니다. (ResNet의 skip connection)</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Identity</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">(</span><span class="n">Identity</span><span class="p">,</span> <span class="n">self</span><span class="p">).</span><span class="nf">__init__</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">x</span>
</code></pre></div></div> <p>LARS Optimizer입니다. (설명 링크)</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"""
LARS: Layer-wise Adaptive Rate Scaling
Converted from TensorFlow to PyTorch
https://github.com/google-research/simclr/blob/master/lars_optimizer.py
"""</span>

<span class="kn">from</span> <span class="n">torch.optim.optimizer</span> <span class="kn">import</span> <span class="n">Optimizer</span><span class="p">,</span> <span class="n">required</span>
<span class="kn">import</span> <span class="n">re</span>

<span class="n">EETA_DEFAULT</span> <span class="o">=</span> <span class="mf">0.001</span>


<span class="k">class</span> <span class="nc">LARS</span><span class="p">(</span><span class="n">Optimizer</span><span class="p">):</span>
    <span class="s">"""
    Layer-wise Adaptive Rate Scaling for large batch training.
    Introduced by "Large Batch Training of Convolutional Networks" by Y. You,
    I. Gitman, and B. Ginsburg. (https://arxiv.org/abs/1708.03888)
    """</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">params</span><span class="p">,</span>
        <span class="n">lr</span><span class="o">=</span><span class="n">required</span><span class="p">,</span>
        <span class="n">momentum</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span>
        <span class="n">use_nesterov</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
        <span class="n">weight_decay</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span>
        <span class="n">exclude_from_weight_decay</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
        <span class="n">exclude_from_layer_adaptation</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
        <span class="n">classic_momentum</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
        <span class="n">eeta</span><span class="o">=</span><span class="n">EETA_DEFAULT</span><span class="p">,</span>
    <span class="p">):</span>
        <span class="s">"""Constructs a LARSOptimizer.
        Args:
        lr: A `float` for learning rate.
        momentum: A `float` for momentum.
        use_nesterov: A 'Boolean' for whether to use nesterov momentum.
        weight_decay: A `float` for weight decay.
        exclude_from_weight_decay: A list of `string` for variable screening, if
            any of the string appears in a variable's name, the variable will be
            excluded for computing weight decay. For example, one could specify
            the list like ['batch_normalization', 'bias'] to exclude BN and bias
            from weight decay.
        exclude_from_layer_adaptation: Similar to exclude_from_weight_decay, but
            for layer adaptation. If it is None, it will be defaulted the same as
            exclude_from_weight_decay.
        classic_momentum: A `boolean` for whether to use classic (or popular)
            momentum. The learning rate is applied during momeuntum update in
            classic momentum, but after momentum for popular momentum.
        eeta: A `float` for scaling of learning rate when computing trust ratio.
        name: The name for the scope.
        """</span>

        <span class="n">self</span><span class="p">.</span><span class="n">epoch</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">defaults</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span>
            <span class="n">lr</span><span class="o">=</span><span class="n">lr</span><span class="p">,</span>
            <span class="n">momentum</span><span class="o">=</span><span class="n">momentum</span><span class="p">,</span>
            <span class="n">use_nesterov</span><span class="o">=</span><span class="n">use_nesterov</span><span class="p">,</span>
            <span class="n">weight_decay</span><span class="o">=</span><span class="n">weight_decay</span><span class="p">,</span>
            <span class="n">exclude_from_weight_decay</span><span class="o">=</span><span class="n">exclude_from_weight_decay</span><span class="p">,</span>
            <span class="n">exclude_from_layer_adaptation</span><span class="o">=</span><span class="n">exclude_from_layer_adaptation</span><span class="p">,</span>
            <span class="n">classic_momentum</span><span class="o">=</span><span class="n">classic_momentum</span><span class="p">,</span>
            <span class="n">eeta</span><span class="o">=</span><span class="n">eeta</span><span class="p">,</span>
        <span class="p">)</span>

        <span class="nf">super</span><span class="p">(</span><span class="n">LARS</span><span class="p">,</span> <span class="n">self</span><span class="p">).</span><span class="nf">__init__</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">defaults</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">lr</span> <span class="o">=</span> <span class="n">lr</span>
        <span class="n">self</span><span class="p">.</span><span class="n">momentum</span> <span class="o">=</span> <span class="n">momentum</span>
        <span class="n">self</span><span class="p">.</span><span class="n">weight_decay</span> <span class="o">=</span> <span class="n">weight_decay</span>
        <span class="n">self</span><span class="p">.</span><span class="n">use_nesterov</span> <span class="o">=</span> <span class="n">use_nesterov</span>
        <span class="n">self</span><span class="p">.</span><span class="n">classic_momentum</span> <span class="o">=</span> <span class="n">classic_momentum</span>
        <span class="n">self</span><span class="p">.</span><span class="n">eeta</span> <span class="o">=</span> <span class="n">eeta</span>
        <span class="n">self</span><span class="p">.</span><span class="n">exclude_from_weight_decay</span> <span class="o">=</span> <span class="n">exclude_from_weight_decay</span>
        <span class="c1"># exclude_from_layer_adaptation is set to exclude_from_weight_decay if the
</span>        <span class="c1"># arg is None.
</span>        <span class="k">if</span> <span class="n">exclude_from_layer_adaptation</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">exclude_from_layer_adaptation</span> <span class="o">=</span> <span class="n">exclude_from_layer_adaptation</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">exclude_from_layer_adaptation</span> <span class="o">=</span> <span class="n">exclude_from_weight_decay</span>

    <span class="k">def</span> <span class="nf">step</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">epoch</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">closure</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">loss</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">if</span> <span class="n">closure</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">loss</span> <span class="o">=</span> <span class="nf">closure</span><span class="p">()</span>

        <span class="k">if</span> <span class="n">epoch</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">epoch</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">epoch</span>
            <span class="n">self</span><span class="p">.</span><span class="n">epoch</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="k">for</span> <span class="n">group</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">param_groups</span><span class="p">:</span>
            <span class="n">weight_decay</span> <span class="o">=</span> <span class="n">group</span><span class="p">[</span><span class="s">"weight_decay"</span><span class="p">]</span>
            <span class="n">momentum</span> <span class="o">=</span> <span class="n">group</span><span class="p">[</span><span class="s">"momentum"</span><span class="p">]</span>
            <span class="n">eeta</span> <span class="o">=</span> <span class="n">group</span><span class="p">[</span><span class="s">"eeta"</span><span class="p">]</span>
            <span class="n">lr</span> <span class="o">=</span> <span class="n">group</span><span class="p">[</span><span class="s">"lr"</span><span class="p">]</span>

            <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">group</span><span class="p">[</span><span class="s">"params"</span><span class="p">]:</span>
                <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="n">grad</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                    <span class="k">continue</span>

                <span class="n">param</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">data</span>
                <span class="n">grad</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">grad</span><span class="p">.</span><span class="n">data</span>

                <span class="n">param_state</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">state</span><span class="p">[</span><span class="n">p</span><span class="p">]</span>

                <span class="c1"># TODO: get param names
</span>                <span class="c1"># if self._use_weight_decay(param_name):
</span>                <span class="n">grad</span> <span class="o">+=</span> <span class="n">self</span><span class="p">.</span><span class="n">weight_decay</span> <span class="o">*</span> <span class="n">param</span>

                <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">classic_momentum</span><span class="p">:</span>
                    <span class="n">trust_ratio</span> <span class="o">=</span> <span class="mf">1.0</span>

                    <span class="c1"># TODO: get param names
</span>                    <span class="c1"># if self._do_layer_adaptation(param_name):
</span>                    <span class="n">w_norm</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">norm</span><span class="p">(</span><span class="n">param</span><span class="p">)</span>
                    <span class="n">g_norm</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">norm</span><span class="p">(</span><span class="n">grad</span><span class="p">)</span>

                    <span class="n">device</span> <span class="o">=</span> <span class="n">g_norm</span><span class="p">.</span><span class="nf">get_device</span><span class="p">()</span>
                    <span class="n">trust_ratio</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span>
                        <span class="n">w_norm</span><span class="p">.</span><span class="nf">ge</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
                        <span class="n">torch</span><span class="p">.</span><span class="nf">where</span><span class="p">(</span>
                            <span class="n">g_norm</span><span class="p">.</span><span class="nf">ge</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
                            <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">eeta</span> <span class="o">*</span> <span class="n">w_norm</span> <span class="o">/</span> <span class="n">g_norm</span><span class="p">),</span>
                            <span class="n">torch</span><span class="p">.</span><span class="nc">Tensor</span><span class="p">([</span><span class="mf">1.0</span><span class="p">]).</span><span class="nf">to</span><span class="p">(</span><span class="n">device</span><span class="p">),</span>
                        <span class="p">),</span>
                        <span class="n">torch</span><span class="p">.</span><span class="nc">Tensor</span><span class="p">([</span><span class="mf">1.0</span><span class="p">]).</span><span class="nf">to</span><span class="p">(</span><span class="n">device</span><span class="p">),</span>
                    <span class="p">).</span><span class="nf">item</span><span class="p">()</span>

                    <span class="n">scaled_lr</span> <span class="o">=</span> <span class="n">lr</span> <span class="o">*</span> <span class="n">trust_ratio</span>
                    <span class="k">if</span> <span class="s">"momentum_buffer"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">param_state</span><span class="p">:</span>
                        <span class="n">next_v</span> <span class="o">=</span> <span class="n">param_state</span><span class="p">[</span><span class="s">"momentum_buffer"</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">zeros_like</span><span class="p">(</span>
                            <span class="n">p</span><span class="p">.</span><span class="n">data</span>
                        <span class="p">)</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">next_v</span> <span class="o">=</span> <span class="n">param_state</span><span class="p">[</span><span class="s">"momentum_buffer"</span><span class="p">]</span>

                    <span class="n">next_v</span><span class="p">.</span><span class="nf">mul_</span><span class="p">(</span><span class="n">momentum</span><span class="p">).</span><span class="nf">add_</span><span class="p">(</span><span class="n">scaled_lr</span><span class="p">,</span> <span class="n">grad</span><span class="p">)</span>
                    <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">use_nesterov</span><span class="p">:</span>
                        <span class="n">update</span> <span class="o">=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">momentum</span> <span class="o">*</span> <span class="n">next_v</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">scaled_lr</span> <span class="o">*</span> <span class="n">grad</span><span class="p">)</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">update</span> <span class="o">=</span> <span class="n">next_v</span>

                    <span class="n">p</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nf">add_</span><span class="p">(</span><span class="o">-</span><span class="n">update</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">raise</span> <span class="nb">NotImplementedError</span>

        <span class="k">return</span> <span class="n">loss</span>

    <span class="k">def</span> <span class="nf">_use_weight_decay</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">param_name</span><span class="p">):</span>
        <span class="s">"""Whether to use L2 weight decay for `param_name`."""</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="n">weight_decay</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">exclude_from_weight_decay</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">exclude_from_weight_decay</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">param_name</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="bp">True</span>

    <span class="k">def</span> <span class="nf">_do_layer_adaptation</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">param_name</span><span class="p">):</span>
        <span class="s">"""Whether to do layer-wise learning rate adaptation for `param_name`."""</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">exclude_from_layer_adaptation</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">exclude_from_layer_adaptation</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">param_name</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="bp">True</span>
</code></pre></div></div> <p>SimCLR 모델입니다.</p> <p>encoder는 feature를 추출하기 위한 CNN based 모델입니다.</p> <p>n_features는 MLP(projector)레이어의 parameter로 사용되었습니다.</p> <p>projectrion_dim은 최종적으로 추출할 feature의 갯수입니다.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SimCLR</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="s">"""
    We opt for simplicity and adopt the commonly used ResNet (He et al., 2016) to obtain hi = f(x ̃i) = ResNet(x ̃i) where hi ∈ Rd is the output after the average pooling layer.
    """</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">encoder</span><span class="p">,</span> <span class="n">projection_dim</span><span class="p">,</span> <span class="n">n_features</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">(</span><span class="n">SimCLR</span><span class="p">,</span> <span class="n">self</span><span class="p">).</span><span class="nf">__init__</span><span class="p">()</span>

        <span class="n">self</span><span class="p">.</span><span class="n">encoder</span> <span class="o">=</span> <span class="n">encoder</span>
        <span class="n">self</span><span class="p">.</span><span class="n">n_features</span> <span class="o">=</span> <span class="n">n_features</span>

        <span class="c1"># Replace the fc layer with an Identity function
</span>        <span class="n">self</span><span class="p">.</span><span class="n">encoder</span><span class="p">.</span><span class="n">fc</span> <span class="o">=</span> <span class="nc">Identity</span><span class="p">()</span>

        <span class="c1"># We use a MLP with one hidden layer to obtain z_i = g(h_i) = W(2)σ(W(1)h_i) where σ is a ReLU non-linearity.
</span>        <span class="n">self</span><span class="p">.</span><span class="n">projector</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">n_features</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">n_features</span><span class="p">,</span> <span class="n">bias</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="nc">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">n_features</span><span class="p">,</span> <span class="n">projection_dim</span><span class="p">,</span> <span class="n">bias</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x_i</span><span class="p">,</span> <span class="n">x_j</span><span class="p">):</span>
        <span class="n">h_i</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">encoder</span><span class="p">(</span><span class="n">x_i</span><span class="p">)</span>
        <span class="n">h_j</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">encoder</span><span class="p">(</span><span class="n">x_j</span><span class="p">)</span>

        <span class="n">z_i</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">projector</span><span class="p">(</span><span class="n">h_i</span><span class="p">)</span>
        <span class="n">z_j</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">projector</span><span class="p">(</span><span class="n">h_j</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">h_i</span><span class="p">,</span> <span class="n">h_j</span><span class="p">,</span> <span class="n">z_i</span><span class="p">,</span> <span class="n">z_j</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">load_optimizer</span><span class="p">(</span><span class="n">optimizer</span><span class="p">,</span> <span class="n">model</span><span class="p">):</span>

    <span class="n">scheduler</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">if</span> <span class="n">optimizer</span> <span class="o">==</span> <span class="s">"Adam"</span><span class="p">:</span>
        <span class="n">optimizer</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">optim</span><span class="p">.</span><span class="nc">Adam</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="nf">parameters</span><span class="p">(),</span> <span class="n">lr</span><span class="o">=</span><span class="mf">3e-4</span><span class="p">)</span>  <span class="c1"># TODO: LARS
</span>    <span class="k">elif</span> <span class="n">optimizer</span> <span class="o">==</span> <span class="s">"LARS"</span><span class="p">:</span>
        <span class="c1"># optimized using LARS with linear learning rate scaling
</span>        <span class="c1"># (i.e. LearningRate = 0.3 × BatchSize/256) and weight decay of 10−6.
</span>        <span class="n">learning_rate</span> <span class="o">=</span> <span class="mf">0.3</span> <span class="o">*</span> <span class="n">batch_size</span> <span class="o">/</span> <span class="mi">256</span>
        <span class="n">optimizer</span> <span class="o">=</span> <span class="nc">LARS</span><span class="p">(</span>
            <span class="n">model</span><span class="p">.</span><span class="nf">parameters</span><span class="p">(),</span>
            <span class="n">lr</span><span class="o">=</span><span class="n">learning_rate</span><span class="p">,</span>
            <span class="n">weight_decay</span><span class="o">=</span><span class="n">weight_decay</span><span class="p">,</span>
            <span class="n">exclude_from_weight_decay</span><span class="o">=</span><span class="p">[</span><span class="s">"batch_normalization"</span><span class="p">,</span> <span class="s">"bias"</span><span class="p">],</span>
        <span class="p">)</span>

        <span class="c1"># "decay the learning rate with the cosine decay schedule without restarts"
</span>        <span class="n">scheduler</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">optim</span><span class="p">.</span><span class="n">lr_scheduler</span><span class="p">.</span><span class="nc">CosineAnnealingLR</span><span class="p">(</span>
            <span class="n">optimizer</span><span class="p">,</span> <span class="n">epochs</span><span class="p">,</span> <span class="n">eta_min</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">last_epoch</span><span class="o">=-</span><span class="mi">1</span>
        <span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">NotImplementedError</span>

    <span class="k">return</span> <span class="n">optimizer</span><span class="p">,</span> <span class="n">scheduler</span>


<span class="k">def</span> <span class="nf">save_model</span><span class="p">(</span><span class="n">model_path</span><span class="p">,</span> <span class="n">current_epoch</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">):</span>
    <span class="n">out</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">model_path</span><span class="p">,</span> <span class="s">"checkpoint_{}.tar"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">current_epoch</span><span class="p">))</span>

    <span class="c1"># To save a DataParallel model generically, save the model.module.state_dict().
</span>    <span class="c1"># This way, you have the flexibility to load the model any way you want to any device you want.
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">torch</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="n">DataParallel</span><span class="p">):</span>
        <span class="n">torch</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="n">module</span><span class="p">.</span><span class="nf">state_dict</span><span class="p">(),</span> <span class="n">out</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">torch</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="nf">state_dict</span><span class="p">(),</span> <span class="n">out</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch.distributed</span> <span class="k">as</span> <span class="n">dist</span>


<span class="k">class</span> <span class="nc">GatherLayer</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">autograd</span><span class="p">.</span><span class="n">Function</span><span class="p">):</span>
    <span class="s">"""Gather tensors from all process, supporting backward propagation."""</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="nb">input</span><span class="p">):</span>
        <span class="n">ctx</span><span class="p">.</span><span class="nf">save_for_backward</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
        <span class="n">output</span> <span class="o">=</span> <span class="p">[</span><span class="n">torch</span><span class="p">.</span><span class="nf">zeros_like</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">dist</span><span class="p">.</span><span class="nf">get_world_size</span><span class="p">())]</span>
        <span class="n">dist</span><span class="p">.</span><span class="nf">all_gather</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="nb">input</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">tuple</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">backward</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="o">*</span><span class="n">grads</span><span class="p">):</span>
        <span class="p">(</span><span class="nb">input</span><span class="p">,)</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">saved_tensors</span>
        <span class="n">grad_out</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">zeros_like</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
        <span class="n">grad_out</span><span class="p">[:]</span> <span class="o">=</span> <span class="n">grads</span><span class="p">[</span><span class="n">dist</span><span class="p">.</span><span class="nf">get_rank</span><span class="p">()]</span>
        <span class="k">return</span> <span class="n">grad_out</span>
</code></pre></div></div> <p>Augmentation된 이미지 쌍(pair)의 similarity계산을 위한 NT_Xent loss함수 입니다.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch.distributed</span> <span class="k">as</span> <span class="n">dist</span>

<span class="k">class</span> <span class="nc">NT_Xent</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">,</span> <span class="n">temperature</span><span class="p">,</span> <span class="n">world_size</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">(</span><span class="n">NT_Xent</span><span class="p">,</span> <span class="n">self</span><span class="p">).</span><span class="nf">__init__</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">batch_size</span> <span class="o">=</span> <span class="n">batch_size</span>
        <span class="n">self</span><span class="p">.</span><span class="n">temperature</span> <span class="o">=</span> <span class="n">temperature</span>
        <span class="n">self</span><span class="p">.</span><span class="n">world_size</span> <span class="o">=</span> <span class="n">world_size</span>

        <span class="n">self</span><span class="p">.</span><span class="n">mask</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">mask_correlated_samples</span><span class="p">(</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">world_size</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">criterion</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">CrossEntropyLoss</span><span class="p">(</span><span class="n">reduction</span><span class="o">=</span><span class="s">"sum"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">similarity_f</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">CosineSimilarity</span><span class="p">(</span><span class="n">dim</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">mask_correlated_samples</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">,</span> <span class="n">world_size</span><span class="p">):</span>
        <span class="n">N</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">batch_size</span> <span class="o">*</span> <span class="n">world_size</span>
        <span class="n">mask</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">ones</span><span class="p">((</span><span class="n">N</span><span class="p">,</span> <span class="n">N</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">bool</span><span class="p">)</span>
        <span class="n">mask</span> <span class="o">=</span> <span class="n">mask</span><span class="p">.</span><span class="nf">fill_diagonal_</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">batch_size</span> <span class="o">*</span> <span class="n">world_size</span><span class="p">):</span>
            <span class="n">mask</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">batch_size</span> <span class="o">*</span> <span class="n">world_size</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="n">mask</span><span class="p">[</span><span class="n">batch_size</span> <span class="o">*</span> <span class="n">world_size</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">return</span> <span class="n">mask</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">z_i</span><span class="p">,</span> <span class="n">z_j</span><span class="p">):</span>
        <span class="s">"""
        We do not sample negative examples explicitly.
        Instead, given a positive pair, similar to (Chen et al., 2017), we treat the other 2(N − 1) augmented examples within a minibatch as negative examples.
        """</span>
        <span class="n">N</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">batch_size</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">world_size</span>

        <span class="n">z</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">cat</span><span class="p">((</span><span class="n">z_i</span><span class="p">,</span> <span class="n">z_j</span><span class="p">),</span> <span class="n">dim</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">world_size</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">z</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">cat</span><span class="p">(</span><span class="n">GatherLayer</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="n">z</span><span class="p">),</span> <span class="n">dim</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

        <span class="n">sim</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">similarity_f</span><span class="p">(</span><span class="n">z</span><span class="p">.</span><span class="nf">unsqueeze</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">z</span><span class="p">.</span><span class="nf">unsqueeze</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> <span class="o">/</span> <span class="n">self</span><span class="p">.</span><span class="n">temperature</span>

        <span class="n">sim_i_j</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">diag</span><span class="p">(</span><span class="n">sim</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">batch_size</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">world_size</span><span class="p">)</span>
        <span class="n">sim_j_i</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">diag</span><span class="p">(</span><span class="n">sim</span><span class="p">,</span> <span class="o">-</span><span class="n">self</span><span class="p">.</span><span class="n">batch_size</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">world_size</span><span class="p">)</span>

        <span class="c1"># We have 2N samples, but with Distributed training every GPU gets N examples too, resulting in: 2xNxN
</span>        <span class="n">positive_samples</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">cat</span><span class="p">((</span><span class="n">sim_i_j</span><span class="p">,</span> <span class="n">sim_j_i</span><span class="p">),</span> <span class="n">dim</span><span class="o">=</span><span class="mi">0</span><span class="p">).</span><span class="nf">reshape</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">negative_samples</span> <span class="o">=</span> <span class="n">sim</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">mask</span><span class="p">].</span><span class="nf">reshape</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>

        <span class="n">labels</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">N</span><span class="p">).</span><span class="nf">to</span><span class="p">(</span><span class="n">positive_samples</span><span class="p">.</span><span class="n">device</span><span class="p">).</span><span class="nf">long</span><span class="p">()</span>
        <span class="n">logits</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">cat</span><span class="p">((</span><span class="n">positive_samples</span><span class="p">,</span> <span class="n">negative_samples</span><span class="p">),</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">loss</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">criterion</span><span class="p">(</span><span class="n">logits</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
        <span class="n">loss</span> <span class="o">/=</span> <span class="n">N</span>
        <span class="k">return</span> <span class="n">loss</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">torch.utils.tensorboard</span> <span class="kn">import</span> <span class="n">SummaryWriter</span>
<span class="n">writer</span> <span class="o">=</span> <span class="nc">SummaryWriter</span><span class="p">()</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="n">global_step</span><span class="p">,</span> <span class="n">train_loader</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">,</span> <span class="n">writer</span><span class="p">):</span>
    <span class="n">loss_epoch</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">step</span><span class="p">,</span> <span class="p">((</span><span class="n">x_i</span><span class="p">,</span> <span class="n">x_j</span><span class="p">),</span> <span class="n">_</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">train_loader</span><span class="p">):</span>
        <span class="n">optimizer</span><span class="p">.</span><span class="nf">zero_grad</span><span class="p">()</span>
        <span class="n">x_i</span> <span class="o">=</span> <span class="n">x_i</span><span class="p">.</span><span class="nf">cuda</span><span class="p">(</span><span class="n">non_blocking</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">x_j</span> <span class="o">=</span> <span class="n">x_j</span><span class="p">.</span><span class="nf">cuda</span><span class="p">(</span><span class="n">non_blocking</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

        <span class="c1"># positive pair, with encoding
</span>        <span class="n">h_i</span><span class="p">,</span> <span class="n">h_j</span><span class="p">,</span> <span class="n">z_i</span><span class="p">,</span> <span class="n">z_j</span> <span class="o">=</span> <span class="nf">model</span><span class="p">(</span><span class="n">x_i</span><span class="p">,</span> <span class="n">x_j</span><span class="p">)</span>

        <span class="n">loss</span> <span class="o">=</span> <span class="nf">criterion</span><span class="p">(</span><span class="n">z_i</span><span class="p">,</span> <span class="n">z_j</span><span class="p">)</span>
        <span class="n">loss</span><span class="p">.</span><span class="nf">backward</span><span class="p">()</span>

        <span class="n">optimizer</span><span class="p">.</span><span class="nf">step</span><span class="p">()</span>

        <span class="k">if</span> <span class="n">step</span> <span class="o">%</span> <span class="mi">50</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Step [</span><span class="si">{</span><span class="n">step</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">)</span><span class="si">}</span><span class="s">]</span><span class="se">\t</span><span class="s"> Loss: </span><span class="si">{</span><span class="n">loss</span><span class="p">.</span><span class="nf">item</span><span class="p">()</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

        <span class="n">writer</span><span class="p">.</span><span class="nf">add_scalar</span><span class="p">(</span><span class="s">"Loss/train_epoch"</span><span class="p">,</span> <span class="n">loss</span><span class="p">.</span><span class="nf">item</span><span class="p">(),</span> <span class="n">global_step</span><span class="p">)</span>
        <span class="n">loss_epoch</span> <span class="o">+=</span> <span class="n">loss</span><span class="p">.</span><span class="nf">item</span><span class="p">()</span>
        <span class="n">global_step</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">loss_epoch</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resnet</span> <span class="o">=</span> <span class="s">"resnet50"</span>
<span class="n">encoder</span> <span class="o">=</span> <span class="nf">get_resnet</span><span class="p">(</span><span class="n">resnet</span><span class="p">,</span> <span class="n">pretrained</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">n_features</span> <span class="o">=</span> <span class="n">encoder</span><span class="p">.</span><span class="n">fc</span><span class="p">.</span><span class="n">in_features</span>  <span class="c1"># get dimensions of fc layer
</span>
<span class="n">projection_dim</span> <span class="o">=</span> <span class="mi">64</span>
<span class="n">model</span> <span class="o">=</span> <span class="nc">SimCLR</span><span class="p">(</span><span class="n">encoder</span><span class="p">,</span> <span class="n">projection_dim</span><span class="p">,</span> <span class="n">n_features</span><span class="p">)</span>
<span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">device</span><span class="p">(</span><span class="s">"cuda"</span><span class="p">)</span> <span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="n">torch</span><span class="p">.</span><span class="nf">device</span><span class="p">(</span><span class="s">"cpu"</span><span class="p">)</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>

<span class="n">optimizer</span><span class="p">,</span> <span class="n">scheduler</span> <span class="o">=</span> <span class="nf">load_optimizer</span><span class="p">(</span><span class="s">"LARS"</span><span class="p">,</span> <span class="n">model</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">criterion</span> <span class="o">=</span> <span class="nc">NT_Xent</span><span class="p">(</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">temperature</span><span class="p">,</span> <span class="n">world_size</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">global_step</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">current_epoch</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">start_epoch</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">start_epoch</span><span class="p">,</span> <span class="n">epochs</span><span class="p">):</span>
    <span class="n">lr</span> <span class="o">=</span> <span class="n">optimizer</span><span class="p">.</span><span class="n">param_groups</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">"lr"</span><span class="p">]</span>
    <span class="n">loss_epoch</span> <span class="o">=</span> <span class="nf">train</span><span class="p">(</span><span class="n">global_step</span><span class="p">,</span> <span class="n">train_loader</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">,</span> <span class="n">writer</span><span class="p">)</span>
    
    <span class="k">if</span> <span class="n">scheduler</span><span class="p">:</span>
        <span class="n">scheduler</span><span class="p">.</span><span class="nf">step</span><span class="p">()</span>
        
    <span class="k">if</span> <span class="n">epoch</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="nf">save_model</span><span class="p">(</span><span class="n">model_path</span><span class="p">,</span> <span class="n">current_epoch</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">)</span>
        
    <span class="n">writer</span><span class="p">.</span><span class="nf">add_scalar</span><span class="p">(</span><span class="s">"Loss/train"</span><span class="p">,</span> <span class="n">loss_epoch</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">),</span> <span class="n">epoch</span><span class="p">)</span>
    <span class="n">writer</span><span class="p">.</span><span class="nf">add_scalar</span><span class="p">(</span><span class="s">"Misc/learning_rate"</span><span class="p">,</span> <span class="n">lr</span><span class="p">,</span> <span class="n">epoch</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span>
        <span class="sa">f</span><span class="s">"Epoch [</span><span class="si">{</span><span class="n">epoch</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">epochs</span><span class="si">}</span><span class="s">]</span><span class="se">\t</span><span class="s"> Loss: </span><span class="si">{</span><span class="n">loss_epoch</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">)</span><span class="si">}</span><span class="se">\t</span><span class="s"> lr: </span><span class="si">{</span><span class="nf">round</span><span class="p">(</span><span class="n">lr</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span><span class="si">}</span><span class="s">"</span>
    <span class="p">)</span>
    <span class="n">current_epoch</span> <span class="o">+=</span> <span class="mi">1</span>
    
<span class="nf">save_model</span><span class="p">(</span><span class="n">model_path</span><span class="p">,</span> <span class="n">current_epoch</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Step [0/192]	 Loss: 5.547216415405273
Step [50/192]	 Loss: 5.5168609619140625
Step [100/192]	 Loss: 5.466494083404541
Step [150/192]	 Loss: 5.5113701820373535
Epoch [0/500]	 Loss: 5.47970977673928	 lr: 0.15
Step [0/192]	 Loss: 5.416123390197754
Step [50/192]	 Loss: 5.365357398986816
Step [100/192]	 Loss: 5.415189266204834
Step [150/192]	 Loss: 5.289378643035889
Epoch [1/500]	 Loss: 5.405081287026405	 lr: 0.15
Step [0/192]	 Loss: 5.412885665893555
Step [50/192]	 Loss: 5.288458347320557
Step [100/192]	 Loss: 5.321774005889893
Step [150/192]	 Loss: 5.202507972717285
Epoch [2/500]	 Loss: 5.278357977668445	 lr: 0.14999
Step [0/192]	 Loss: 5.205842971801758
Step [50/192]	 Loss: 5.146916389465332
Step [100/192]	 Loss: 5.040021896362305
Step [150/192]	 Loss: 5.046496391296387
Epoch [3/500]	 Loss: 5.109636095662911	 lr: 0.14999
Step [0/192]	 Loss: 5.132671356201172
Step [50/192]	 Loss: 4.919950008392334
Step [100/192]	 Loss: 5.0143327713012695
Step [150/192]	 Loss: 4.902953147888184
Epoch [4/500]	 Loss: 4.947697018583615	 lr: 0.14998
Step [0/192]	 Loss: 4.82228946685791
Step [50/192]	 Loss: 4.764313220977783
Step [100/192]	 Loss: 4.924652576446533
Step [150/192]	 Loss: 4.818438529968262
'
'
'
Epoch [495/500]	 Loss: 3.9043560971816382	 lr: 4e-05
Step [0/192]	 Loss: 3.893375873565674
Step [50/192]	 Loss: 3.9129462242126465
Step [100/192]	 Loss: 3.8850409984588623
Step [150/192]	 Loss: 3.884953498840332
Epoch [496/500]	 Loss: 3.903852423032125	 lr: 2e-05
Step [0/192]	 Loss: 3.869290828704834
Step [50/192]	 Loss: 3.9251136779785156
Step [100/192]	 Loss: 3.8720123767852783
Step [150/192]	 Loss: 3.9006035327911377
Epoch [497/500]	 Loss: 3.9030883188048997	 lr: 1e-05
Step [0/192]	 Loss: 3.949983835220337
Step [50/192]	 Loss: 3.929286479949951
Step [100/192]	 Loss: 3.900035858154297
Step [150/192]	 Loss: 3.9218673706054688
Epoch [498/500]	 Loss: 3.9071918639043965	 lr: 1e-05
Step [0/192]	 Loss: 3.8706607818603516
Step [50/192]	 Loss: 3.879091501235962
Step [100/192]	 Loss: 3.887544870376587
Step [150/192]	 Loss: 3.8865678310394287
Epoch [499/500]	 Loss: 3.903093626101812	 lr: 0.0
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>]]></content><author><name></name></author><category term="code"/><category term="SimCLR"/><summary type="html"><![CDATA[SimCLR 모델을 학습할 때 사용한 코드입니다.]]></summary></entry><entry><title type="html">SimCLR_evaluate code</title><link href="https://yeongjin96.github.io/blog/2023/simCLR_evaluate/" rel="alternate" type="text/html" title="SimCLR_evaluate code"/><published>2023-01-18T15:09:00+00:00</published><updated>2023-01-18T15:09:00+00:00</updated><id>https://yeongjin96.github.io/blog/2023/simCLR_evaluate</id><content type="html" xml:base="https://yeongjin96.github.io/blog/2023/simCLR_evaluate/"><![CDATA[<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">torch</span>
<span class="kn">import</span> <span class="n">torchvision</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">import</span> <span class="n">torch.nn</span> <span class="k">as</span> <span class="n">nn</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">use_tpu</span> <span class="o">=</span> <span class="bp">False</span>
<span class="k">if</span> <span class="n">use_tpu</span><span class="p">:</span>
  <span class="n">VERSION</span> <span class="o">=</span> <span class="s">"20200220"</span> <span class="c1">#@param ["20200220","nightly", "xrt==1.15.0"]
</span>  <span class="err">!</span><span class="n">curl</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">raw</span><span class="p">.</span><span class="n">githubusercontent</span><span class="p">.</span><span class="n">com</span><span class="o">/</span><span class="n">pytorch</span><span class="o">/</span><span class="n">xla</span><span class="o">/</span><span class="n">master</span><span class="o">/</span><span class="n">contrib</span><span class="o">/</span><span class="n">scripts</span><span class="o">/</span><span class="n">env</span><span class="o">-</span><span class="n">setup</span><span class="p">.</span><span class="n">py</span> <span class="o">-</span><span class="n">o</span> <span class="n">pytorch</span><span class="o">-</span><span class="n">xla</span><span class="o">-</span><span class="n">env</span><span class="o">-</span><span class="n">setup</span><span class="p">.</span><span class="n">py</span>
  <span class="err">!</span><span class="n">python</span> <span class="n">pytorch</span><span class="o">-</span><span class="n">xla</span><span class="o">-</span><span class="n">env</span><span class="o">-</span><span class="n">setup</span><span class="p">.</span><span class="n">py</span> <span class="o">--</span><span class="n">version</span> <span class="err">$</span><span class="n">VERSION</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LogisticRegression</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">n_features</span><span class="p">,</span> <span class="n">n_classes</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">(</span><span class="n">LogisticRegression</span><span class="p">,</span> <span class="n">self</span><span class="p">).</span><span class="nf">__init__</span><span class="p">()</span>

        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="n">n_features</span><span class="p">,</span> <span class="n">n_classes</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">model</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">loader</span><span class="p">,</span> <span class="n">simclr_model</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">):</span>
    <span class="n">loss_epoch</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">accuracy_epoch</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">step</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">loader</span><span class="p">):</span>
        <span class="n">optimizer</span><span class="p">.</span><span class="nf">zero_grad</span><span class="p">()</span>

        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">device</span><span class="p">)</span>
        <span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">device</span><span class="p">)</span>

        <span class="n">output</span> <span class="o">=</span> <span class="nf">model</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">loss</span> <span class="o">=</span> <span class="nf">criterion</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

        <span class="n">predicted</span> <span class="o">=</span> <span class="n">output</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">acc</span> <span class="o">=</span> <span class="p">(</span><span class="n">predicted</span> <span class="o">==</span> <span class="n">y</span><span class="p">).</span><span class="nf">sum</span><span class="p">().</span><span class="nf">item</span><span class="p">()</span> <span class="o">/</span> <span class="n">y</span><span class="p">.</span><span class="nf">size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">accuracy_epoch</span> <span class="o">+=</span> <span class="n">acc</span>

        <span class="n">loss</span><span class="p">.</span><span class="nf">backward</span><span class="p">()</span>
        <span class="n">optimizer</span><span class="p">.</span><span class="nf">step</span><span class="p">()</span>

        <span class="n">loss_epoch</span> <span class="o">+=</span> <span class="n">loss</span><span class="p">.</span><span class="nf">item</span><span class="p">()</span>
        <span class="c1"># if step % 100 == 0:
</span>        <span class="c1">#     print(
</span>        <span class="c1">#         f"Step [{step}/{len(loader)}]\t Loss: {loss.item()}\t Accuracy: {acc}"
</span>        <span class="c1">#     )
</span>
    <span class="k">return</span> <span class="n">loss_epoch</span><span class="p">,</span> <span class="n">accuracy_epoch</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">loader</span><span class="p">,</span> <span class="n">simclr_model</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">):</span>
    <span class="n">loss_epoch</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">accuracy_epoch</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">model</span><span class="p">.</span><span class="nf">eval</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">step</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">loader</span><span class="p">):</span>
        <span class="n">model</span><span class="p">.</span><span class="nf">zero_grad</span><span class="p">()</span>

        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">device</span><span class="p">)</span>
        <span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">device</span><span class="p">)</span>

        <span class="n">output</span> <span class="o">=</span> <span class="nf">model</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">loss</span> <span class="o">=</span> <span class="nf">criterion</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

        <span class="n">predicted</span> <span class="o">=</span> <span class="n">output</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">acc</span> <span class="o">=</span> <span class="p">(</span><span class="n">predicted</span> <span class="o">==</span> <span class="n">y</span><span class="p">).</span><span class="nf">sum</span><span class="p">().</span><span class="nf">item</span><span class="p">()</span> <span class="o">/</span> <span class="n">y</span><span class="p">.</span><span class="nf">size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">accuracy_epoch</span> <span class="o">+=</span> <span class="n">acc</span>

        <span class="n">loss_epoch</span> <span class="o">+=</span> <span class="n">loss</span><span class="p">.</span><span class="nf">item</span><span class="p">()</span>

    <span class="k">return</span> <span class="n">loss_epoch</span><span class="p">,</span> <span class="n">accuracy_epoch</span>


</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TransformsSimCLR</span><span class="p">:</span>
    <span class="s">"""
    A stochastic data augmentation module that transforms any given data example randomly
    resulting in two correlated views of the same example,
    denoted x ̃i and x ̃j, which we consider as a positive pair.
    """</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
        <span class="n">s</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">color_jitter</span> <span class="o">=</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">ColorJitter</span><span class="p">(</span>
            <span class="mf">0.8</span> <span class="o">*</span> <span class="n">s</span><span class="p">,</span> <span class="mf">0.8</span> <span class="o">*</span> <span class="n">s</span><span class="p">,</span> <span class="mf">0.8</span> <span class="o">*</span> <span class="n">s</span><span class="p">,</span> <span class="mf">0.2</span> <span class="o">*</span> <span class="n">s</span>
        <span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">train_transform</span> <span class="o">=</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">Compose</span><span class="p">(</span>
            <span class="p">[</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">RandomResizedCrop</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="n">size</span><span class="p">),</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">RandomHorizontalFlip</span><span class="p">(),</span>  <span class="c1"># with 0.5 probability
</span>                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">RandomApply</span><span class="p">([</span><span class="n">color_jitter</span><span class="p">],</span> <span class="n">p</span><span class="o">=</span><span class="mf">0.8</span><span class="p">),</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">RandomGrayscale</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="mf">0.2</span><span class="p">),</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">ToTensor</span><span class="p">(),</span>
            <span class="p">]</span>
        <span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">test_transform</span> <span class="o">=</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">Compose</span><span class="p">(</span>
            <span class="p">[</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">Resize</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="n">size</span><span class="p">),</span>
                <span class="n">torchvision</span><span class="p">.</span><span class="n">transforms</span><span class="p">.</span><span class="nc">ToTensor</span><span class="p">(),</span>
            <span class="p">]</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">train_transform</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="nf">train_transform</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">yaml</span>

<span class="k">def</span> <span class="nf">yaml_config_hook</span><span class="p">(</span><span class="n">config_file</span><span class="p">):</span>
    <span class="s">"""
    Custom YAML config loader, which can include other yaml files (I like using config files
    insteaad of using argparser)
    """</span>

    <span class="c1"># load yaml files in the nested 'defaults' section, which include defaults for experiments
</span>    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">config_file</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">cfg</span> <span class="o">=</span> <span class="n">yaml</span><span class="p">.</span><span class="nf">safe_load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="s">"defaults"</span><span class="p">,</span> <span class="p">[]):</span>
            <span class="n">config_dir</span><span class="p">,</span> <span class="n">cf</span> <span class="o">=</span> <span class="n">d</span><span class="p">.</span><span class="nf">popitem</span><span class="p">()</span>
            <span class="n">cf</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">config_file</span><span class="p">),</span> <span class="n">config_dir</span><span class="p">,</span> <span class="n">cf</span> <span class="o">+</span> <span class="s">".yaml"</span><span class="p">)</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">cf</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">l</span> <span class="o">=</span> <span class="n">yaml</span><span class="p">.</span><span class="nf">safe_load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
                <span class="n">cfg</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>

    <span class="k">if</span> <span class="s">"defaults"</span> <span class="ow">in</span> <span class="n">cfg</span><span class="p">.</span><span class="nf">keys</span><span class="p">():</span>
        <span class="k">del</span> <span class="n">cfg</span><span class="p">[</span><span class="s">"defaults"</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">cfg</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_resnet</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">pretrained</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="n">resnets</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">"resnet18"</span><span class="p">:</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">models</span><span class="p">.</span><span class="nf">resnet18</span><span class="p">(</span><span class="n">pretrained</span><span class="o">=</span><span class="n">pretrained</span><span class="p">),</span>
        <span class="s">"resnet50"</span><span class="p">:</span> <span class="n">torchvision</span><span class="p">.</span><span class="n">models</span><span class="p">.</span><span class="nf">resnet50</span><span class="p">(</span><span class="n">pretrained</span><span class="o">=</span><span class="n">pretrained</span><span class="p">),</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">resnets</span><span class="p">.</span><span class="nf">keys</span><span class="p">():</span>
        <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s"> is not a valid ResNet version"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">resnets</span><span class="p">[</span><span class="n">name</span><span class="p">]</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SimCLR</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="s">"""
    We opt for simplicity and adopt the commonly used ResNet (He et al., 2016) to obtain hi = f(x ̃i) = ResNet(x ̃i) where hi ∈ Rd is the output after the average pooling layer.
    """</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">encoder</span><span class="p">,</span> <span class="n">projection_dim</span><span class="p">,</span> <span class="n">n_features</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">(</span><span class="n">SimCLR</span><span class="p">,</span> <span class="n">self</span><span class="p">).</span><span class="nf">__init__</span><span class="p">()</span>

        <span class="n">self</span><span class="p">.</span><span class="n">encoder</span> <span class="o">=</span> <span class="n">encoder</span>
        <span class="n">self</span><span class="p">.</span><span class="n">n_features</span> <span class="o">=</span> <span class="n">n_features</span>

        <span class="c1"># Replace the fc layer with an Identity function
</span>        <span class="n">self</span><span class="p">.</span><span class="n">encoder</span><span class="p">.</span><span class="n">fc</span> <span class="o">=</span> <span class="nc">Identity</span><span class="p">()</span>

        <span class="c1"># We use a MLP with one hidden layer to obtain z_i = g(h_i) = W(2)σ(W(1)h_i) where σ is a ReLU non-linearity.
</span>        <span class="n">self</span><span class="p">.</span><span class="n">projector</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">n_features</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">n_features</span><span class="p">,</span> <span class="n">bias</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="nc">ReLU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">n_features</span><span class="p">,</span> <span class="n">projection_dim</span><span class="p">,</span> <span class="n">bias</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x_i</span><span class="p">,</span> <span class="n">x_j</span><span class="p">):</span>
        <span class="n">h_i</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">encoder</span><span class="p">(</span><span class="n">x_i</span><span class="p">)</span>
        <span class="n">h_j</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">encoder</span><span class="p">(</span><span class="n">x_j</span><span class="p">)</span>

        <span class="n">z_i</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">projector</span><span class="p">(</span><span class="n">h_i</span><span class="p">)</span>
        <span class="n">z_j</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">projector</span><span class="p">(</span><span class="n">h_j</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">h_i</span><span class="p">,</span> <span class="n">h_j</span><span class="p">,</span> <span class="n">z_i</span><span class="p">,</span> <span class="n">z_j</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Identity</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">(</span><span class="n">Identity</span><span class="p">,</span> <span class="n">self</span><span class="p">).</span><span class="nf">__init__</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">x</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>

<span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s">"SimCLR"</span><span class="p">)</span>
<span class="n">config</span> <span class="o">=</span> <span class="nf">yaml_config_hook</span><span class="p">(</span><span class="s">"./config/config.yaml"</span><span class="p">)</span>
<span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">config</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sa">f</span><span class="s">"--</span><span class="si">{</span><span class="n">k</span><span class="si">}</span><span class="s">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">v</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nf">type</span><span class="p">(</span><span class="n">v</span><span class="p">))</span>

<span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">([])</span>

<span class="k">if</span> <span class="n">use_tpu</span><span class="p">:</span>
  <span class="n">args</span><span class="p">.</span><span class="n">device</span> <span class="o">=</span> <span class="n">dev</span>
<span class="k">else</span><span class="p">:</span>
  <span class="n">args</span><span class="p">.</span><span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">device</span><span class="p">(</span><span class="s">"cuda:0"</span> <span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="s">"cpu"</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">args</span><span class="p">.</span><span class="n">batch_size</span> <span class="o">=</span> <span class="mi">128</span>
<span class="n">args</span><span class="p">.</span><span class="n">dataset</span> <span class="o">=</span> <span class="s">"Custom"</span>
<span class="n">args</span><span class="p">.</span><span class="n">resnet</span> <span class="o">=</span> <span class="s">"resnet18"</span>
<span class="n">args</span><span class="p">.</span><span class="n">model_path</span> <span class="o">=</span> <span class="s">"../save_models"</span>
<span class="n">args</span><span class="p">.</span><span class="n">epoch_num</span> <span class="o">=</span> <span class="mi">100</span>
<span class="n">logistic_batch_size</span> <span class="o">=</span> <span class="mi">128</span>
<span class="n">args</span><span class="p">.</span><span class="n">logistic_epochs</span> <span class="o">=</span> <span class="mi">500</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">torchvision.datasets</span> <span class="kn">import</span> <span class="n">ImageFolder</span>
<span class="n">dataset</span> <span class="o">=</span> <span class="nc">ImageFolder</span><span class="p">(</span><span class="n">root</span><span class="o">=</span><span class="s">'../data/PNU_x40'</span><span class="p">,</span> <span class="n">transform</span><span class="o">=</span><span class="nc">TransformsSimCLR</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">image_size</span><span class="p">).</span><span class="n">test_transform</span><span class="p">)</span>

<span class="n">train_size</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="mf">0.8</span> <span class="o">*</span> <span class="nf">len</span><span class="p">(</span><span class="n">dataset</span><span class="p">))</span>
<span class="n">test_size</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">dataset</span><span class="p">)</span> <span class="o">-</span> <span class="n">train_size</span>

<span class="n">train_dataset</span><span class="p">,</span> <span class="n">test_dataset</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nf">random_split</span><span class="p">(</span><span class="n">dataset</span><span class="p">,</span> <span class="p">[</span><span class="n">train_size</span><span class="p">,</span> <span class="n">test_size</span><span class="p">])</span>

<span class="n">train_loader</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nc">DataLoader</span><span class="p">(</span><span class="n">train_dataset</span><span class="p">,</span> 
                                           <span class="n">batch_size</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">logistic_batch_size</span><span class="p">,</span>
                                           <span class="n">drop_last</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                                           <span class="n">shuffle</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
                                           <span class="n">num_workers</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">workers</span><span class="p">,)</span>

<span class="n">test_loader</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nc">DataLoader</span><span class="p">(</span><span class="n">test_dataset</span><span class="p">,</span> 
                                          <span class="n">batch_size</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">logistic_batch_size</span><span class="p">,</span>
                                          <span class="n">drop_last</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                                          <span class="n">shuffle</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
                                          <span class="n">num_workers</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">workers</span><span class="p">,)</span>

</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">encoder</span> <span class="o">=</span> <span class="nf">get_resnet</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">resnet</span><span class="p">,</span> <span class="n">pretrained</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span> <span class="c1"># don't load a pre-trained model from PyTorch repo
</span><span class="n">n_features</span> <span class="o">=</span> <span class="n">encoder</span><span class="p">.</span><span class="n">fc</span><span class="p">.</span><span class="n">in_features</span>  <span class="c1"># get dimensions of fc layer
</span>
<span class="c1"># load pre-trained model from checkpoint
</span><span class="n">simclr_model</span> <span class="o">=</span> <span class="nc">SimCLR</span><span class="p">(</span><span class="n">encoder</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">projection_dim</span><span class="p">,</span> <span class="n">n_features</span><span class="p">)</span>
<span class="n">model_fp</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span>
    <span class="n">args</span><span class="p">.</span><span class="n">model_path</span><span class="p">,</span> <span class="s">"checkpoint50_500.tar"</span>
<span class="p">)</span>
<span class="n">simclr_model</span><span class="p">.</span><span class="nf">load_state_dict</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">model_fp</span><span class="p">,</span> <span class="n">map_location</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">device</span><span class="p">.</span><span class="nb">type</span><span class="p">))</span>
<span class="n">simclr_model</span> <span class="o">=</span> <span class="n">simclr_model</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">device</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## Logistic Regression
</span><span class="n">n_classes</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">model</span> <span class="o">=</span> <span class="nc">LogisticRegression</span><span class="p">(</span><span class="n">simclr_model</span><span class="p">.</span><span class="n">n_features</span><span class="p">,</span> <span class="n">n_classes</span><span class="p">)</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">device</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">optimizer</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">optim</span><span class="p">.</span><span class="nc">Adam</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="nf">parameters</span><span class="p">(),</span> <span class="n">lr</span><span class="o">=</span><span class="mf">3e-4</span><span class="p">)</span>
<span class="n">criterion</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="nc">CrossEntropyLoss</span><span class="p">()</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">inference</span><span class="p">(</span><span class="n">loader</span><span class="p">,</span> <span class="n">simclr_model</span><span class="p">,</span> <span class="n">device</span><span class="p">):</span>
    <span class="n">feature_vector</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">labels_vector</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">step</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">loader</span><span class="p">):</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>

        <span class="c1"># get encoding
</span>        <span class="k">with</span> <span class="n">torch</span><span class="p">.</span><span class="nf">no_grad</span><span class="p">():</span>
            <span class="n">h</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="nf">simclr_model</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>

        <span class="n">h</span> <span class="o">=</span> <span class="n">h</span><span class="p">.</span><span class="nf">detach</span><span class="p">()</span>

        <span class="n">feature_vector</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">h</span><span class="p">.</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">detach</span><span class="p">().</span><span class="nf">numpy</span><span class="p">())</span>
        <span class="n">labels_vector</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="nf">numpy</span><span class="p">())</span>

        <span class="k">if</span> <span class="n">step</span> <span class="o">%</span> <span class="mi">20</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Step [</span><span class="si">{</span><span class="n">step</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">loader</span><span class="p">)</span><span class="si">}</span><span class="s">]</span><span class="se">\t</span><span class="s"> Computing features..."</span><span class="p">)</span>

    <span class="n">feature_vector</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">feature_vector</span><span class="p">)</span>
    <span class="n">labels_vector</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">labels_vector</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Features shape {}"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">feature_vector</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">feature_vector</span><span class="p">,</span> <span class="n">labels_vector</span>


<span class="k">def</span> <span class="nf">get_features</span><span class="p">(</span><span class="n">context_model</span><span class="p">,</span> <span class="n">train_loader</span><span class="p">,</span> <span class="n">test_loader</span><span class="p">,</span> <span class="n">device</span><span class="p">):</span>
    <span class="n">train_X</span><span class="p">,</span> <span class="n">train_y</span> <span class="o">=</span> <span class="nf">inference</span><span class="p">(</span><span class="n">train_loader</span><span class="p">,</span> <span class="n">context_model</span><span class="p">,</span> <span class="n">device</span><span class="p">)</span>
    <span class="n">test_X</span><span class="p">,</span> <span class="n">test_y</span> <span class="o">=</span> <span class="nf">inference</span><span class="p">(</span><span class="n">test_loader</span><span class="p">,</span> <span class="n">context_model</span><span class="p">,</span> <span class="n">device</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">train_X</span><span class="p">,</span> <span class="n">train_y</span><span class="p">,</span> <span class="n">test_X</span><span class="p">,</span> <span class="n">test_y</span>


<span class="k">def</span> <span class="nf">create_data_loaders_from_arrays</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>
    <span class="n">train</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nc">TensorDataset</span><span class="p">(</span>
        <span class="n">torch</span><span class="p">.</span><span class="nf">from_numpy</span><span class="p">(</span><span class="n">X_train</span><span class="p">),</span> <span class="n">torch</span><span class="p">.</span><span class="nf">from_numpy</span><span class="p">(</span><span class="n">y_train</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="n">train_loader</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nc">DataLoader</span><span class="p">(</span>
        <span class="n">train</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span>
    <span class="p">)</span>

    <span class="n">test</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nc">TensorDataset</span><span class="p">(</span>
        <span class="n">torch</span><span class="p">.</span><span class="nf">from_numpy</span><span class="p">(</span><span class="n">X_test</span><span class="p">),</span> <span class="n">torch</span><span class="p">.</span><span class="nf">from_numpy</span><span class="p">(</span><span class="n">y_test</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="n">test_loader</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nc">DataLoader</span><span class="p">(</span>
        <span class="n">test</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">train_loader</span><span class="p">,</span> <span class="n">test_loader</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="s">"### Creating features from pre-trained context model ###"</span><span class="p">)</span>
<span class="p">(</span><span class="n">train_X</span><span class="p">,</span> <span class="n">train_y</span><span class="p">,</span> <span class="n">test_X</span><span class="p">,</span> <span class="n">test_y</span><span class="p">)</span> <span class="o">=</span> <span class="nf">get_features</span><span class="p">(</span>
    <span class="n">simclr_model</span><span class="p">,</span> <span class="n">train_loader</span><span class="p">,</span> <span class="n">test_loader</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">device</span>
<span class="p">)</span>

<span class="n">arr_train_loader</span><span class="p">,</span> <span class="n">arr_test_loader</span> <span class="o">=</span> <span class="nf">create_data_loaders_from_arrays</span><span class="p">(</span>
    <span class="n">train_X</span><span class="p">,</span> <span class="n">train_y</span><span class="p">,</span> <span class="n">test_X</span><span class="p">,</span> <span class="n">test_y</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">logistic_batch_size</span>
<span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>### Creating features from pre-trained context model ###
Step [0/59]	 Computing features...
Step [20/59]	 Computing features...
Step [40/59]	 Computing features...
Features shape (15104, 512)
Step [0/14]	 Computing features...
Features shape (3584, 512)
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">logistic_epochs</span><span class="p">):</span>
    <span class="n">loss_epoch</span><span class="p">,</span> <span class="n">accuracy_epoch</span> <span class="o">=</span> <span class="nf">train</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">arr_train_loader</span><span class="p">,</span> <span class="n">simclr_model</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">)</span>
    
    <span class="k">if</span> <span class="n">epoch</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
      <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Epoch [</span><span class="si">{</span><span class="n">epoch</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">args</span><span class="p">.</span><span class="n">logistic_epochs</span><span class="si">}</span><span class="s">]</span><span class="se">\t</span><span class="s"> Loss: </span><span class="si">{</span><span class="n">loss_epoch</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">)</span><span class="si">}</span><span class="se">\t</span><span class="s"> Accuracy: </span><span class="si">{</span><span class="n">accuracy_epoch</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>


<span class="c1"># final testing
</span><span class="n">loss_epoch</span><span class="p">,</span> <span class="n">accuracy_epoch</span> <span class="o">=</span> <span class="nf">test</span><span class="p">(</span>
    <span class="n">args</span><span class="p">,</span> <span class="n">arr_test_loader</span><span class="p">,</span> <span class="n">simclr_model</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">optimizer</span>
<span class="p">)</span>
<span class="nf">print</span><span class="p">(</span>
    <span class="sa">f</span><span class="s">"[FINAL]</span><span class="se">\t</span><span class="s"> Loss: </span><span class="si">{</span><span class="n">loss_epoch</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">test_loader</span><span class="p">)</span><span class="si">}</span><span class="se">\t</span><span class="s"> Accuracy: </span><span class="si">{</span><span class="n">accuracy_epoch</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">test_loader</span><span class="p">)</span><span class="si">}</span><span class="s">"</span>
<span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Epoch [0/500]	 Loss: 0.5930819640818396	 Accuracy: 0.7464535361842105
Epoch [10/500]	 Loss: 0.39237397085679204	 Accuracy: 0.8347553453947368
Epoch [20/500]	 Loss: 0.3644816267647241	 Accuracy: 0.847399259868421
Epoch [30/500]	 Loss: 0.3481225881137346	 Accuracy: 0.8536698190789473
Epoch [40/500]	 Loss: 0.3363633563644008	 Accuracy: 0.8597347861842105
Epoch [50/500]	 Loss: 0.3270935043692589	 Accuracy: 0.8640522203947368
Epoch [60/500]	 Loss: 0.31941156481441696	 Accuracy: 0.8676500822368421
Epoch [70/500]	 Loss: 0.3128436703823115	 Accuracy: 0.8699629934210527
Epoch [80/500]	 Loss: 0.30710559750073835	 Accuracy: 0.8726356907894737
Epoch [90/500]	 Loss: 0.3020114884956887	 Accuracy: 0.8745888157894737
Epoch [100/500]	 Loss: 0.2974322961741372	 Accuracy: 0.8768503289473685
Epoch [110/500]	 Loss: 0.29327447614387464	 Accuracy: 0.8784436677631579
'
'
'
Epoch [400/500]	 Loss: 0.23650363087654114	 Accuracy: 0.9050678453947368
Epoch [410/500]	 Loss: 0.23541850380991636	 Accuracy: 0.9056332236842105
Epoch [420/500]	 Loss: 0.23435954435875542	 Accuracy: 0.9058388157894737
Epoch [430/500]	 Loss: 0.2333255169030867	 Accuracy: 0.9061472039473685
Epoch [440/500]	 Loss: 0.232315268171461	 Accuracy: 0.9066097861842105
Epoch [450/500]	 Loss: 0.2313277190060992	 Accuracy: 0.9071751644736842
Epoch [460/500]	 Loss: 0.2303618745584237	 Accuracy: 0.9076377467105263
Epoch [470/500]	 Loss: 0.22941679507493973	 Accuracy: 0.908203125
Epoch [480/500]	 Loss: 0.2284916174647055	 Accuracy: 0.9087685032894737
Epoch [490/500]	 Loss: 0.22758550843910166	 Accuracy: 0.9093852796052632
[FINAL]	 Loss: 0.3037595466563576	 Accuracy: 0.8743832236842105
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>]]></content><author><name></name></author><category term="code"/><category term="SimCLR"/><summary type="html"><![CDATA[SimCLR 모델을 평가할 때 사용한 코드입니다.]]></summary></entry><entry><title type="html">NLP_Stemming</title><link href="https://yeongjin96.github.io/blog/2022/test1/" rel="alternate" type="text/html" title="NLP_Stemming"/><published>2022-12-22T16:40:16+00:00</published><updated>2022-12-22T16:40:16+00:00</updated><id>https://yeongjin96.github.io/blog/2022/test1</id><content type="html" xml:base="https://yeongjin96.github.io/blog/2022/test1/"><![CDATA[<h1>YeongJin</h1> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">jamo</span> <span class="kn">import</span> <span class="n">j2h</span>
<span class="kn">from</span> <span class="n">jamo</span> <span class="kn">import</span> <span class="n">j2hcj</span>
<span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">product</span>

<span class="k">def</span> <span class="nf">Assembling</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">:</span>
    <span class="n">raw_list</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">return_list</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">raw</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
        <span class="n">raw_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">raw</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">raw_list</span><span class="p">)):</span>
        <span class="n">sel</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="nf">len</span><span class="p">(</span><span class="n">raw_list</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">+</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">):</span>
            <span class="n">tmp</span> <span class="o">=</span> <span class="n">raw_list</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">sel</span><span class="p">:</span><span class="n">j</span><span class="p">]</span>
            <span class="n">sel</span> <span class="o">=</span> <span class="n">j</span>

            <span class="k">if</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s">' '</span><span class="p">:</span>
                <span class="n">return_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">j2h</span><span class="p">(</span><span class="n">tmp</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
                
            <span class="k">else</span> <span class="p">:</span>
                <span class="n">return_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">j2h</span><span class="p">(</span><span class="n">tmp</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
        <span class="n">return_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="s">' '</span><span class="p">)</span>
    <span class="n">return_list</span> <span class="o">=</span> <span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">return_list</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">return_list</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">YJ_Stemmer</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span><span class="c1">#data = after POS tagging data
</span>        <span class="n">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>
    
    <span class="k">def</span> <span class="nf">Korean_jamo</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span><span class="c1">#divide by Consonant &amp; vowel(tokenize for korean)
</span>        <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">data</span>

        <span class="n">CHOSUNG_LIST</span> <span class="o">=</span> <span class="p">[</span><span class="s">'ㄱ'</span><span class="p">,</span> <span class="s">'ㄲ'</span><span class="p">,</span> <span class="s">'ㄴ'</span><span class="p">,</span> <span class="s">'ㄷ'</span><span class="p">,</span> <span class="s">'ㄸ'</span><span class="p">,</span> <span class="s">'ㄹ'</span><span class="p">,</span> <span class="s">'ㅁ'</span><span class="p">,</span> <span class="s">'ㅂ'</span><span class="p">,</span> <span class="s">'ㅃ'</span><span class="p">,</span>
                        <span class="s">'ㅅ'</span><span class="p">,</span> <span class="s">'ㅆ'</span><span class="p">,</span> <span class="s">'ㅇ'</span><span class="p">,</span> <span class="s">'ㅈ'</span><span class="p">,</span> <span class="s">'ㅉ'</span><span class="p">,</span> <span class="s">'ㅊ'</span><span class="p">,</span> <span class="s">'ㅋ'</span><span class="p">,</span> <span class="s">'ㅌ'</span><span class="p">,</span> <span class="s">'ㅍ'</span><span class="p">,</span> <span class="s">'ㅎ'</span><span class="p">]</span>

        <span class="n">JUNGSUNG_LIST</span> <span class="o">=</span> <span class="p">[</span><span class="s">'ㅏ'</span><span class="p">,</span> <span class="s">'ㅐ'</span><span class="p">,</span> <span class="s">'ㅑ'</span><span class="p">,</span> <span class="s">'ㅒ'</span><span class="p">,</span> <span class="s">'ㅓ'</span><span class="p">,</span> <span class="s">'ㅔ'</span><span class="p">,</span> <span class="s">'ㅕ'</span><span class="p">,</span> <span class="s">'ㅖ'</span><span class="p">,</span> <span class="s">'ㅗ'</span><span class="p">,</span> <span class="s">'ㅘ'</span><span class="p">,</span>
                         <span class="s">'ㅙ'</span><span class="p">,</span> <span class="s">'ㅚ'</span><span class="p">,</span> <span class="s">'ㅛ'</span><span class="p">,</span> <span class="s">'ㅜ'</span><span class="p">,</span> <span class="s">'ㅝ'</span><span class="p">,</span> <span class="s">'ㅞ'</span><span class="p">,</span> <span class="s">'ㅟ'</span><span class="p">,</span> <span class="s">'ㅠ'</span><span class="p">,</span> <span class="s">'ㅡ'</span><span class="p">,</span> <span class="s">'ㅢ'</span><span class="p">,</span> <span class="s">'ㅣ'</span><span class="p">]</span>

        <span class="n">JONGSUNG_LIST</span> <span class="o">=</span> <span class="p">[</span><span class="s">' '</span><span class="p">,</span> <span class="s">'ㄱ'</span><span class="p">,</span> <span class="s">'ㄲ'</span><span class="p">,</span> <span class="s">'ㄳ'</span><span class="p">,</span> <span class="s">'ㄴ'</span><span class="p">,</span> <span class="s">'ㄵ'</span><span class="p">,</span> <span class="s">'ㄶ'</span><span class="p">,</span> <span class="s">'ㄷ'</span><span class="p">,</span> <span class="s">'ㄹ'</span><span class="p">,</span> <span class="s">'ㄺ'</span><span class="p">,</span>
                         <span class="s">'ㄻ'</span><span class="p">,</span> <span class="s">'ㄼ'</span><span class="p">,</span> <span class="s">'ㄽ'</span><span class="p">,</span> <span class="s">'ㄾ'</span><span class="p">,</span> <span class="s">'ㄿ'</span><span class="p">,</span> <span class="s">'ㅀ'</span><span class="p">,</span> <span class="s">'ㅁ'</span><span class="p">,</span> <span class="s">'ㅂ'</span><span class="p">,</span> <span class="s">'ㅄ'</span><span class="p">,</span> <span class="s">'ㅅ'</span><span class="p">,</span>
                         <span class="s">'ㅆ'</span><span class="p">,</span> <span class="s">'ㅇ'</span><span class="p">,</span> <span class="s">'ㅈ'</span><span class="p">,</span> <span class="s">'ㅊ'</span><span class="p">,</span> <span class="s">'ㅋ'</span><span class="p">,</span> <span class="s">'ㅌ'</span><span class="p">,</span> <span class="s">'ㅍ'</span><span class="p">,</span> <span class="s">'ㅎ'</span><span class="p">]</span>
        <span class="n">r_lst</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">list_num</span><span class="o">=</span><span class="mi">0</span>
        
        <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
            <span class="n">word_list</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="mi">0</span><span class="p">])):</span>
                <span class="n">w</span> <span class="o">=</span> <span class="n">word</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">]</span>
                <span class="k">if</span> <span class="s">'가'</span><span class="o">&lt;=</span><span class="n">w</span><span class="o">&lt;=</span><span class="s">'힣'</span><span class="p">:</span>
                    <span class="n">ch1</span> <span class="o">=</span> <span class="p">(</span><span class="nf">ord</span><span class="p">(</span><span class="n">w</span><span class="p">)</span> <span class="o">-</span> <span class="nf">ord</span><span class="p">(</span><span class="s">'가'</span><span class="p">))</span><span class="o">//</span><span class="mi">588</span>
                    <span class="n">ch2</span> <span class="o">=</span> <span class="p">((</span><span class="nf">ord</span><span class="p">(</span><span class="n">w</span><span class="p">)</span> <span class="o">-</span> <span class="nf">ord</span><span class="p">(</span><span class="s">'가'</span><span class="p">))</span> <span class="o">-</span> <span class="p">(</span><span class="mi">588</span><span class="o">*</span><span class="n">ch1</span><span class="p">))</span> <span class="o">//</span> <span class="mi">28</span>
                    <span class="n">ch3</span> <span class="o">=</span> <span class="p">(</span><span class="nf">ord</span><span class="p">(</span><span class="n">w</span><span class="p">)</span> <span class="o">-</span> <span class="nf">ord</span><span class="p">(</span><span class="s">'가'</span><span class="p">))</span> <span class="o">-</span> <span class="p">(</span><span class="mi">588</span><span class="o">*</span><span class="n">ch1</span><span class="p">)</span> <span class="o">-</span> <span class="mi">28</span><span class="o">*</span><span class="n">ch2</span>
<span class="c1">#                     word_list.append([CHOSUNG_LIST[ch1], JUNGSUNG_LIST[ch2], JONGSUNG_LIST[ch3]])
</span>                    <span class="n">word_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">CHOSUNG_LIST</span><span class="p">[</span><span class="n">ch1</span><span class="p">])</span>
                    <span class="n">word_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">JUNGSUNG_LIST</span><span class="p">[</span><span class="n">ch2</span><span class="p">])</span>
                    <span class="n">word_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">JONGSUNG_LIST</span><span class="p">[</span><span class="n">ch3</span><span class="p">])</span>
            <span class="n">data</span><span class="p">[</span><span class="n">list_num</span><span class="p">]</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">list_num</span><span class="p">])</span>
            <span class="n">data</span><span class="p">[</span><span class="n">list_num</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">word_list</span>
<span class="c1">#             data[list_num] = tuple(data[list_num])
</span>            
            <span class="n">list_num</span><span class="o">+=</span><span class="mi">1</span>
                
        <span class="k">return</span> <span class="n">data</span>

    <span class="k">def</span> <span class="nf">Stem_1Step</span><span class="p">(</span><span class="n">self</span><span class="p">):</span><span class="c1">#first remove JOSA (after tokenize + 의)
</span>        <span class="nf">print</span><span class="p">(</span><span class="s">'First it will remove JOSA'</span><span class="p">)</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nc">Korean_jamo</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>
        <span class="n">first_data</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="s">'Josa'</span><span class="p">:</span>
                <span class="n">first_data</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                
        <span class="n">data_num</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">data_w</span> <span class="ow">in</span> <span class="n">first_data</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">data_w</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">3</span><span class="p">:]</span> <span class="o">==</span> <span class="p">[</span><span class="s">'ㅇ'</span><span class="p">,</span><span class="s">'ㅢ'</span><span class="p">,</span><span class="s">' '</span><span class="p">]:</span>
                <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">data_w</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
                    <span class="k">del</span> <span class="n">first_data</span><span class="p">[</span><span class="n">data_num</span><span class="p">]</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">first_data</span><span class="p">[</span><span class="n">data_num</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">data_w</span><span class="p">[</span><span class="mi">0</span><span class="p">][:</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span>
                
            <span class="n">data_num</span> <span class="o">+=</span><span class="mi">1</span>
        <span class="k">return</span> <span class="n">first_data</span>
    
    <span class="k">def</span> <span class="nf">Stem_2Step</span><span class="p">(</span><span class="n">self</span><span class="p">):</span><span class="c1">#second remove past (ㅆ던, ㅆ다)
</span>        <span class="nf">print</span><span class="p">(</span><span class="s">'Second it will remove past words'</span><span class="p">)</span>
        <span class="n">second_data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nc">Stem_1Step</span><span class="p">()</span>
        <span class="n">data_num</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">data_w</span> <span class="ow">in</span> <span class="n">second_data</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">data_w</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span> <span class="o">==</span> <span class="p">[</span><span class="s">'ㅆ'</span><span class="p">,</span><span class="s">'ㄷ'</span><span class="p">,</span><span class="s">'ㅓ'</span><span class="p">,</span><span class="s">'ㄴ'</span><span class="p">]:</span>
                <span class="n">second_data</span><span class="p">[</span><span class="n">data_num</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">data_w</span><span class="p">[</span><span class="mi">0</span><span class="p">][:</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span>
            
            <span class="k">elif</span> <span class="n">data_w</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span> <span class="o">==</span> <span class="p">[</span><span class="s">'ㅆ'</span><span class="p">,</span><span class="s">'ㄷ'</span><span class="p">,</span><span class="s">'ㅏ'</span><span class="p">,</span><span class="s">' '</span><span class="p">]:</span>
                <span class="n">second_data</span><span class="p">[</span><span class="n">data_num</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">data_w</span><span class="p">[</span><span class="mi">0</span><span class="p">][:</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span>
                
            <span class="n">data_num</span> <span class="o">+=</span><span class="mi">1</span>
        <span class="k">return</span> <span class="n">second_data</span>
    
    <span class="k">def</span> <span class="nf">Stem_3Step</span><span class="p">(</span><span class="n">self</span><span class="p">):</span><span class="c1">#third remove plural (들)
</span>        <span class="nf">print</span><span class="p">(</span><span class="s">'Third it will remove plural'</span><span class="p">)</span>
        <span class="n">third_data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nc">Stem_2Step</span><span class="p">()</span>
        <span class="n">data_num</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">data_w</span> <span class="ow">in</span> <span class="n">third_data</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">data_w</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">3</span><span class="p">:]</span> <span class="o">==</span> <span class="p">[</span><span class="s">'ㄷ'</span><span class="p">,</span><span class="s">'ㅡ'</span><span class="p">,</span><span class="s">'ㄹ'</span><span class="p">]:</span>
                <span class="n">third_data</span><span class="p">[</span><span class="n">data_num</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">data_w</span><span class="p">[</span><span class="mi">0</span><span class="p">][:</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span>
            <span class="k">elif</span> <span class="n">data_w</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">3</span><span class="p">:]</span> <span class="o">==</span> <span class="p">[</span><span class="s">'ㄴ'</span><span class="p">,</span><span class="s">'ㅡ'</span><span class="p">,</span><span class="s">'ㄴ'</span><span class="p">]:</span>
                <span class="k">if</span> <span class="n">data_w</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Noun'</span><span class="p">:</span>
                    <span class="n">data_w</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">3</span><span class="p">:]</span> <span class="o">=</span> <span class="p">[</span><span class="s">'ㄷ'</span><span class="p">,</span><span class="s">'ㅏ'</span><span class="p">,</span><span class="s">' '</span><span class="p">]</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">third_data</span><span class="p">[</span><span class="n">data_num</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">data_w</span><span class="p">[</span><span class="mi">0</span><span class="p">][:</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span>
            <span class="n">data_num</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">third_data</span>
    
    <span class="k">def</span> <span class="nf">Stem_4Step</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">'Fourth it will remove ~ㅣ도, ㅏ게'</span><span class="p">)</span>
        <span class="n">fourth_data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nc">Stem_3Step</span><span class="p">()</span>
        <span class="n">data_num</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">data_w</span> <span class="ow">in</span> <span class="n">fourth_data</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">data_w</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">5</span><span class="p">:]</span> <span class="o">==</span> <span class="p">[</span><span class="s">'ㅣ'</span><span class="p">,</span><span class="s">' '</span><span class="p">,</span><span class="s">'ㄷ'</span><span class="p">,</span><span class="s">'ㅗ'</span><span class="p">,</span><span class="s">' '</span><span class="p">]:</span>
                <span class="n">fourth_data</span><span class="p">[</span><span class="n">data_num</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">data_w</span><span class="p">[</span><span class="mi">0</span><span class="p">][:</span><span class="o">-</span><span class="mi">6</span><span class="p">]</span>
            
            <span class="k">elif</span> <span class="n">data_w</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">5</span><span class="p">:]</span> <span class="o">==</span> <span class="p">[</span><span class="s">'ㅏ'</span><span class="p">,</span><span class="s">' '</span><span class="p">,</span><span class="s">'ㄱ'</span><span class="p">,</span><span class="s">'ㅔ'</span><span class="p">,</span><span class="s">' '</span><span class="p">]:</span>
                <span class="n">fourth_data</span><span class="p">[</span><span class="n">data_num</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">data_w</span><span class="p">[</span><span class="mi">0</span><span class="p">][:</span><span class="o">-</span><span class="mi">6</span><span class="p">]</span>
                
            <span class="n">data_num</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">fourth_data</span>
    
    <span class="k">def</span> <span class="nf">Stem_5Step</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">'Fifth it will change ~며,~게,~고 to ~다'</span><span class="p">)</span>
        <span class="n">fifth_data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nc">Stem_4Step</span><span class="p">()</span>
        <span class="n">data_num</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">data_w</span> <span class="ow">in</span> <span class="n">fifth_data</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">data_w</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">3</span><span class="p">:]</span> <span class="o">==</span> <span class="p">[</span><span class="s">'ㅁ'</span><span class="p">,</span><span class="s">'ㅕ'</span><span class="p">,</span><span class="s">' '</span><span class="p">]:</span>
                <span class="n">fifth_data</span><span class="p">[</span><span class="n">data_num</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">3</span><span class="p">:]</span> <span class="o">=</span> <span class="p">[</span><span class="s">'ㄷ'</span><span class="p">,</span><span class="s">'ㅏ'</span><span class="p">,</span><span class="s">' '</span><span class="p">]</span>
            
            <span class="k">elif</span> <span class="n">data_w</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">3</span><span class="p">:]</span> <span class="o">==</span> <span class="p">[</span><span class="s">'ㄱ'</span><span class="p">,</span><span class="s">'ㅔ'</span><span class="p">,</span><span class="s">' '</span><span class="p">]:</span>
                <span class="k">if</span> <span class="n">data_w</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="s">'Noun'</span><span class="p">:</span>
                    <span class="n">fifth_data</span><span class="p">[</span><span class="n">data_num</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">3</span><span class="p">:]</span> <span class="o">=</span> <span class="p">[</span><span class="s">'ㄷ'</span><span class="p">,</span><span class="s">'ㅏ'</span><span class="p">,</span><span class="s">' '</span><span class="p">]</span>
                
            <span class="k">elif</span> <span class="n">data_w</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">3</span><span class="p">:]</span> <span class="o">==</span> <span class="p">[</span><span class="s">'ㄱ'</span><span class="p">,</span><span class="s">'ㅗ'</span><span class="p">,</span><span class="s">' '</span><span class="p">]:</span>
                <span class="n">fifth_data</span><span class="p">[</span><span class="n">data_num</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">3</span><span class="p">:]</span> <span class="o">=</span> <span class="p">[</span><span class="s">'ㄷ'</span><span class="p">,</span><span class="s">'ㅏ'</span><span class="p">,</span><span class="s">' '</span><span class="p">]</span>
                
            <span class="k">elif</span> <span class="n">data_w</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">4</span><span class="p">:]</span> <span class="o">==</span> <span class="p">[</span><span class="s">'ㅆ'</span><span class="p">,</span><span class="s">'ㅈ'</span><span class="p">,</span><span class="s">'ㅛ'</span><span class="p">,</span><span class="s">' '</span><span class="p">]:</span>
                <span class="n">fifth_data</span><span class="p">[</span><span class="n">data_num</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">3</span><span class="p">:]</span> <span class="o">=</span> <span class="p">[</span><span class="s">'ㄷ'</span><span class="p">,</span><span class="s">'ㅏ'</span><span class="p">,</span><span class="s">' '</span><span class="p">]</span>
                
            <span class="n">data_num</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">fifth_data</span>
    
    <span class="k">def</span> <span class="nf">Stem_6Step</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">'sixth it will change ~은-it is Adjective'</span><span class="p">)</span>
        <span class="n">sixth_data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nc">Stem_5Step</span><span class="p">()</span>
        <span class="n">data_num</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">data_w</span> <span class="ow">in</span> <span class="n">sixth_data</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">data_w</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">3</span><span class="p">:]</span> <span class="o">==</span> <span class="p">[</span><span class="s">'ㅇ'</span><span class="p">,</span><span class="s">'ㅡ'</span><span class="p">,</span><span class="s">'ㄴ'</span><span class="p">]:</span>
                <span class="k">if</span> <span class="n">data_w</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Adjective'</span><span class="p">:</span>
                    <span class="n">sixth_data</span><span class="p">[</span><span class="n">data_num</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">3</span><span class="p">:]</span> <span class="o">=</span> <span class="p">[</span><span class="s">'ㄷ'</span><span class="p">,</span><span class="s">'ㅏ'</span><span class="p">,</span><span class="s">' '</span><span class="p">]</span>
                
            <span class="n">data_num</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">sixth_data</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">konlpy</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">glob</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_path</span> <span class="o">=</span> <span class="s">'../news'</span>
<span class="n">data_list</span> <span class="o">=</span> <span class="n">glob</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="n">data_path</span><span class="o">+</span><span class="s">'/*.txt'</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">data_list</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s">"r"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'utf-8'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">ori_data</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
        
<span class="c1"># ori_data = ori_data.split("\n")
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># print(len(ori_data))
</span><span class="nf">print</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">ori_data</span><span class="p">))</span>
<span class="c1"># data_len = int(len(ori_data)/4)
</span><span class="n">data_len</span> <span class="o">=</span> <span class="mi">100000</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>408604611
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#The corpus was too large to create morphemes.
#So, the corpus was divided and used.
</span><span class="n">data1</span> <span class="o">=</span> <span class="s">''</span>
<span class="c1"># data2 = ''
# data3 = ''
# data4 = ''
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">data_len</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">ori_data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">data1</span><span class="o">+=</span><span class="n">ori_data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        
<span class="c1"># for i in range(data_len, data_len*2):
#     if ori_data[i] != None:
#         data2+=ori_data[i]
</span>        
<span class="c1"># for i in range(data_len*2, data_len*3):
#     if ori_data[i] != None:
#         data3+=ori_data[i]
</span>        
<span class="c1"># for i in range(data_len*3, data_len*4):
#     if ori_data[i] != None:
#         data4+=ori_data[i]
</span>        
<span class="c1"># data_list = [data1, data2, data3, data4]
# del data1, data2, data3, data4
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Josa_list = ['JKS', 'JKC', 'JKG', 'JKO', 'JKB', 'JKV', 'JKQ', 'JX', 'JC']
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">re</span>
<span class="c1"># remove_punctuation_list = []
# for data in data_list:
#     remove_punctuation = re.sub(r'[^\w\s%가-힣]', ' ', data)
#     remove_punctuation = re.sub("\n", " ", remove_punctuation)
#     remove_punctuation_list.append(re.sub("\n", " ", remove_punctuation))
</span><span class="n">remove_punctuation</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sa">r</span><span class="s">'[^\w\s%가-힣]'</span><span class="p">,</span> <span class="s">' '</span><span class="p">,</span> <span class="n">data1</span><span class="p">)</span>
<span class="n">remove_punctuation</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">remove_punctuation</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># from konlpy.tag import Twitter
# twit = Twitter()
# data_morphs = twit.morphs(remove_punctuation)
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">konlpy.tag</span> <span class="kn">import</span> <span class="n">Okt</span>
<span class="n">okt</span> <span class="o">=</span> <span class="nc">Okt</span><span class="p">()</span>
<span class="n">data_morphs1</span> <span class="o">=</span> <span class="n">okt</span><span class="p">.</span><span class="nf">pos</span><span class="p">(</span><span class="n">remove_punctuation</span><span class="p">)</span>
<span class="c1"># data_morphs2 = okt.pos(remove_punctuation_list[1])
# data_morphs3 = okt.pos(remove_punctuation_list[2])
# data_morphs4 = okt.pos(remove_punctuation_list[3])
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># data_morphs = mecab.morphs(remove_punctuation)
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># data_morphs
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># from sklearn.feature_extraction.text import CountVectorizer
# vector = CountVectorizer()
# bow = vector.fit_transform(data_morphs)
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">to_ngrams</span><span class="p">(</span><span class="n">words</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
    <span class="n">ngrams</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">words</span><span class="p">)</span> <span class="o">-</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
        <span class="n">ngrams</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">tuple</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="n">b</span><span class="p">:</span><span class="n">b</span><span class="o">+</span><span class="n">n</span><span class="p">]))</span>
    <span class="k">return</span> <span class="n">ngrams</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bigram</span> <span class="o">=</span> <span class="nf">to_ngrams</span><span class="p">(</span><span class="n">data_morphs1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">sentences</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">pos_freq</span> <span class="o">=</span> <span class="p">[]</span><span class="c1">#i wanna calculate because most of Josa is followed by a noun, or 
</span>             <span class="c1">#there is a high probability that a proper noun is followed by noun or verb.
</span>
<span class="k">for</span> <span class="n">gram</span> <span class="ow">in</span> <span class="n">bigram</span><span class="p">:</span>
    <span class="n">sentences</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">gram</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">gram</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]))</span>
    
<span class="k">for</span> <span class="n">gram</span> <span class="ow">in</span> <span class="n">bigram</span><span class="p">:</span>
    <span class="n">pos_freq</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">gram</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">gram</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]))</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">nltk</span> <span class="kn">import</span> <span class="n">ConditionalFreqDist</span>
<span class="kn">from</span> <span class="n">nltk.probability</span> <span class="kn">import</span> <span class="n">ConditionalProbDist</span><span class="p">,</span> <span class="n">MLEProbDist</span>
<span class="n">cfd</span> <span class="o">=</span> <span class="nc">ConditionalFreqDist</span><span class="p">(</span><span class="n">sentences</span><span class="p">)</span>
<span class="n">cpd</span> <span class="o">=</span> <span class="nc">ConditionalProbDist</span><span class="p">(</span><span class="n">cfd</span><span class="p">,</span> <span class="n">MLEProbDist</span><span class="p">)</span>

<span class="n">pfd</span> <span class="o">=</span> <span class="nc">ConditionalFreqDist</span><span class="p">(</span><span class="n">pos_freq</span><span class="p">)</span>
<span class="n">ppd</span> <span class="o">=</span> <span class="nc">ConditionalProbDist</span><span class="p">(</span><span class="n">pfd</span><span class="p">,</span> <span class="n">MLEProbDist</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pfd</span><span class="p">[</span><span class="s">'Josa'</span><span class="p">].</span><span class="nf">most_common</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[('Noun', 5651),
 ('Verb', 1552),
 ('Adjective', 608),
 ('Number', 323),
 ('Adverb', 134),
 ('Modifier', 123),
 ('Determiner', 93)]
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cfd</span><span class="p">[</span><span class="s">"방안"</span><span class="p">].</span><span class="nf">most_common</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[('을', 10), ('에', 4), ('과', 2), ('등', 2), ('이라고', 1), ('문건', 1)]
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cpd</span><span class="p">[</span><span class="s">"방안"</span><span class="p">].</span><span class="nf">prob</span><span class="p">(</span><span class="s">"을"</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0.5
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">konlpy.tag</span> <span class="kn">import</span> <span class="n">Mecab</span>
<span class="n">mecab</span> <span class="o">=</span> <span class="nc">Mecab</span><span class="p">()</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">youtube_data_path</span> <span class="o">=</span> <span class="s">'../youtube/data/Suka'</span>
<span class="n">youtube_list</span> <span class="o">=</span> <span class="n">glob</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="n">youtube_data_path</span><span class="o">+</span><span class="s">'/*.txt'</span><span class="p">)</span>

<span class="n">youtube_data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">path</span> <span class="ow">in</span> <span class="n">youtube_list</span><span class="p">:</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">"r"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'utf-8'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">youtube_data</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">())</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">y_remove_punctuation</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sa">r</span><span class="s">'[^\w\s%가-힣]'</span><span class="p">,</span> <span class="s">' '</span><span class="p">,</span> <span class="n">youtube_data</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">y_remove_punctuation</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">y_remove_punctuation</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">youtube_morphs</span> <span class="o">=</span> <span class="n">okt</span><span class="p">.</span><span class="nf">pos</span><span class="p">(</span><span class="n">y_remove_punctuation</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Stemer</span> <span class="o">=</span> <span class="nc">YJ_Stemmer</span><span class="p">(</span><span class="n">youtube_morphs</span><span class="p">)</span>
<span class="n">youtube_stem</span> <span class="o">=</span> <span class="n">Stemer</span><span class="p">.</span><span class="nc">Stem_6Step</span><span class="p">()</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sixth it will change ~은-it is Adjective
Fifth it will change ~며,~게,~고 to ~다
Fourth it will remove ~ㅣ도, ㅏ게
Third it will remove plural
Second it will remove past words
First it will remove JOSA
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">assem_kor</span> <span class="o">=</span> <span class="n">mecab</span><span class="p">.</span><span class="nf">morphs</span><span class="p">(</span><span class="n">assem_kor</span><span class="p">)</span><span class="c1">#tokenizer
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">new_sentence</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">assem_kor</span><span class="p">:</span> 
    <span class="k">if</span> <span class="n">w</span> <span class="o">!=</span> <span class="s">' '</span><span class="p">:</span>
        <span class="n">new_w</span> <span class="o">=</span> <span class="n">cfd</span><span class="p">[</span><span class="n">w</span><span class="p">].</span><span class="nf">most_common</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">new_sentence</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">new_w</span> <span class="o">!=</span> <span class="p">[]:</span>
            <span class="n">new_sentence</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">new_w</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#A very funny result came out. (not mean good!)
#I haven't used all the data I have, but if you use more data with add Trigram the results will be better! Thank you
</span></code></pre></div></div>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="links"/><summary type="html"><![CDATA[simple stemming code]]></summary></entry></feed>